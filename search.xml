<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>（软考）网络工程师考试相关信息概述</title>
      <link href="/2022/07/28/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%80%83%E8%AF%95%E7%9B%B8%E5%85%B3%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/07/28/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E8%80%83%E8%AF%95%E7%9B%B8%E5%85%B3%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h1>（软考）网络工程师考试相关信息概述</h1><h2 id="所有项目">所有项目</h2><img src="/../../img/photo-1520869562399-e772f042f422" alt="black network switch with cables" style="zoom: 25%;"><p><img src="/../../img/v2-f42abf93565120de2fe21bc6a91376d0_720w.jpg" alt="img"></p><h2 id="考试时间">考试时间</h2><p>软考<strong>一年考2次</strong>，考试时间分别在<strong>5月份</strong>和<strong>11月份。</strong></p><p>每个地方考试报名时间不同，基本都在每次考试前三个月左右开始报名，报名周期在一周到半个月左右，要考的要记得这个周期。</p><p><img src="/../../img/image-20220728213423781.png" alt="image-20220728213423781"></p><p><img src="/../../img/image-20220728213529169.png" alt="image-20220728213529169"></p><h2 id="报考条件">报考条件</h2><p>软考报名不设学历与资历条件、年龄以及专业等限制，<strong>只要你想考，都可以报名参加。</strong></p><p>软考的考试报名费在100-300之间（中级100+，高级200+），每个地市不太一样，具体要查对应的官网，但这样算来，其实平均每科60块钱</p><p>软考每次只能报考一科（一共27个科目），不能太贪心</p><h2 id="考试大致情况">考试大致情况</h2><p>软考中级考试有两个科目，上午75道单选题，75分满分，下午案例分析，75分满分。</p><p>软考高级在中级的基础上多一篇论文写作，论文75分满分。</p><p>每科的及格线一般在45分，三科均达到45分才算通过考试。</p><p><img src="/../../img/v2-1e25e7206d303476722490ab997e6a46_720w.jpg" alt="img"></p><p><strong>上午选择题的知识点分布</strong></p><p><img src="/../../img/v2-62d4028f8d14374468e3da704b0eb0c4_720w.jpg" alt="img"></p><p><img src="/../../img/v2-b1c5684f05e862c58e40ffad6667d8ee_720w.jpg" alt="img"></p><p><strong>下午案例分析题知识点分布</strong></p><p><img src="/../../img/v2-e40787e9ef9483c07e45490135b6105e_720w.jpg" alt="img"></p><p><strong>1、准备一本《<a href="https://www.zhihu.com/search?q=%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B%E5%B8%88%E6%95%99%E7%A8%8B&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%22407873490%22%7D">网络工程师教程</a>》,买一个视频课程。</strong></p><p>（主要还是看的<a href="https://www.zhihu.com/search?q=%E7%BD%91%E5%B7%A5&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22article%22%2C%22sourceId%22%3A%22407873490%22%7D">网工</a>总结笔记，教材没怎么看，教材太厚了，笔记也就几十页。</p><p><img src="/../../img/v2-c3cdb47c36a1ec8450092e2ffa61910b_b.jpg" alt="img"></p><p>除了基础知识笔记，我也看了很多其他的，计算题总结、下午案例分析解题总结等等。</p><p><a href="https://link.zhihu.com/?target=https%3A//docs.qq.com/doc/DTlFQS2RsRUpQZWpX"><img src="/../../img/v2-e82ba8bdfa29a7936f0c65b557f9eec5_ipico.jpg" alt="img"></a></p><p><img src="/../../img/v2-5738c1eaf87226a91c54b7a408d55db6_b.jpg" alt="img"></p><p><strong>2、 同步视频和书本内容，梳理知识点，加上题目练习，逐步熟练掌握知识点；</strong></p><p>（练习题是在网上找的习题，质量不是特别高，不过多刷题，记忆知识点还是快一点）</p><p><strong>3.、把历年真题打印出来，十一套真题，17年到22年的，分层做题。</strong></p><p>下午的案例实操性挺强的，所以去下载了一个华为模拟器，敲命令，然后还去网上看了一些案例，推荐大家去华为的官网去看一些案例。</p><p><a href="https://link.zhihu.com/?target=https%3A//support.huawei.com/enterprise/zh/doc/EDOC1000178398/9dd4664e">VLAN配置举例 - S9300, S9300E, S9300X V200R011C10 配置指南-以太网交换 - 华为support.huawei.com/enterprise/zh/doc/EDOC1000178398/9dd4664e<img src="/../../img/v2-0e6e0f46d7504242302bc8055ad9c8c2_ipico.jpg" alt="img"></a></p><p><strong>4.、对答案解析，做好试卷分析，做好错题记录，历年真题各个击破。</strong></p><p><strong>5、打印3套模拟真题，模拟考场环境，给自己打分，统计好正确率。</strong></p><p><img src="/../../img/v2-a0d63ce561fe293a5e73504b36d58144_b.jpg" alt="img"></p><p><strong>6、总结复习，错题、难题等再次进行巩固复习。</strong></p><p>以上就是我的一个学习经验，零基础，对网工无从下手的话，可以参考下我的计划表，我的这个复习比较扎实，因为我自己基础也不是很好，怕一次通过不了，复习我就尽可能的全面。</p><p>每天的详细安排我没有制定，我觉得有个大致预估时间就可以了，前期的基础知识不管复习多久，最后都要留一个月的时间做真题和模拟题。</p><p><strong>计划表大致可以把它分为三个阶段：基础知识、刷题和总结。</strong></p><p>基础知识就是计划表的1、2点，主要还是看的教材，视频我是两倍速看的，我能理解的知识点我就跳过了。</p><p>刷题就是3、4、5点，真题的上午题和下午题是分开刷的，错题要做好标记。下午题有点难，我刷题过程中，很多不会做，也去找了很多人问，自己也下载模拟器敲过很多命令，慢慢的找到了一些感觉。</p><p>模拟题如果能保证自己正确率在百分之八十以上，那基本上考试就没什么问题了。</p><p>最后的是总结阶段，这个时候已经是考前几天了，不需要再刷很多题目了，该刷的也都差不多了，对前面的复习进行一个总结概括，多看错题。</p><p>按部就班复习后你会发现考试难度不大，我后期做模拟题给自己打分的时候，基本上都能维持50分及以上，所以正式考试的时候也不慌张，心里抱着必过的想法。</p><p>扎扎实实的复习考试结果是不会让你失望的，不用在乎网上说的通过率，好好复习，做提高通过率的那一人！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 网工考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo留言页面</title>
      <link href="/2022/07/24/hexo/hexo%E7%95%99%E8%A8%80%E9%A1%B5%E9%9D%A2/"/>
      <url>/2022/07/24/hexo/hexo%E7%95%99%E8%A8%80%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>一个完整的博客网站必然少不了留言页面。<br><img src="/../img/20200719154338212.png" alt="在这里插入图片描述"><br>本篇博文记录如何添加留言页面。</p><p><img src="/../../img/photo-1632067694887-097be1c5c5d4" alt="img"></p><h4 id="1-页面生成命令">1 页面生成命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo n page guestbook</span><br></pre></td></tr></table></figure><h4 id="2-修改配置文件">2 修改配置文件</h4><p>在上面的命令执行完后，会在 博客目录/source/ 下生成guestbook目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客目录</span><br><span class="line">vim <span class="built_in">source</span>/guestbook/index.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一行即可</span></span><br><span class="line">---</span><br><span class="line">title: 给我留言吧</span><br><span class="line"><span class="built_in">date</span>: 2020-07-19 15:20:22</span><br><span class="line"><span class="built_in">type</span>: <span class="string">&quot;guestbook&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>然后更改主题的配置文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客目录</span><br><span class="line">vim themes/next/_config.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一行即可</span></span><br><span class="line"><span class="comment"># 尤其要注意的是，在两根竖线前不能有空格，否则页面链接会报错。</span></span><br><span class="line">menu:</span><br><span class="line">  home: /|| home</span><br><span class="line">  categories: /categories/|| th</span><br><span class="line">  tags: /tags/|| tags</span><br><span class="line">  archives: /archives/|| archive</span><br><span class="line">  about: /about/|| user</span><br><span class="line">  guestbook: /guestbook/|| comment</span><br></pre></td></tr></table></figure><p>最后，更改主题语言配置文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 博客目录</span><br><span class="line"><span class="comment"># 注意，这里选择哪种语言，就该哪个文件</span></span><br><span class="line">vim themes/next/languages/zh-Hans.yml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加留言这一行</span></span><br><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  schedule: 日程表</span><br><span class="line">  sitemap: 站点地图</span><br><span class="line">  commonweal: 公益404</span><br><span class="line">  guestbook: 留言</span><br></pre></td></tr></table></figure><h4 id="3重新生成博客">3重新生成博客</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>然后就可以看到效果了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo编译故障排除</title>
      <link href="/2022/07/24/hexo/hexo%E7%BC%96%E8%AF%91%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/"/>
      <url>/2022/07/24/hexo/hexo%E7%BC%96%E8%AF%91%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1>hexo编译故障排除</h1><p><img src="/../../img/photo-1607746746362-4c89ad1c0866" alt="man in black t-shirt sitting on white chair"></p><h2 id="wordcount-is-not-a-function-totalcount-is-not-a-function">wordcount is not a function / totalcount is not a function</h2><p>解决：</p><p>报错wordcount is not a function</p><p>请检查是否安装了wordcount插件 npm i --save hexo-wordcount</p><h2 id="博文图片不显示（加载不成功）">博文图片不显示（加载不成功）</h2><p>解决：</p><h3 id="安装">安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn add hexo-filter-image</span><br><span class="line"># or </span><br><span class="line">npm install hexo-filter-image --save</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h3 id="设置">设置</h3><p>给 _config 设置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true #我只设置了这个，没设置下边两行也好使。</span><br><span class="line">filter_image:</span><br><span class="line">  log: true</span><br><span class="line">123</span><br></pre></td></tr></table></figure><h3 id="设置图片">设置图片</h3><p><img src="/../../img/20200528172727757.png" alt="在这里插入图片描述"><br>在你博客的source文件夹里边新建一个img文件夹，把图片扔进去。这个放图片的文件夹跟你放文章的文件夹是平级。<br>然后文章里用 <code>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-J69ZVhZA-1590658049693)(/img/test.jpg)]</code>，你在本地的markdown编辑器上是不显示图片的，但是网站上显示是没问题的。</p><h2 id="打开本地检索报错-：-Cannot-read-properties-of-undefined-reading-‘path’">打开本地检索报错 ： Cannot read properties of undefined (reading ‘path’)</h2><p>解决：插件安装检查，根据提示 path 大概率配置文件中没有这个玩意，需要加入</p><p><img src="/../../img/image-20220724111839700.png" alt="image-20220724111839700"></p><h3 id="hexo-butterfly-搜索系统引入">hexo-butterfly-搜索系统引入</h3><h3 id="本地方式">本地方式</h3><blockquote><p>开发说明：</p></blockquote><p>&lt;1&gt;安装hexo-generator-search，按照文档做相应的配置（格式只支持xml）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>复制</p><p>&lt;2&gt;在全局配置文件_config.yml文件中添加配置：</p><p>​    具体配置参考官方说明：<a href="https://github.com/wzpan/hexo-generator-search">https://github.com/wzpan/hexo-generator-search</a></p><p>​    模板参考：</p><p><img src="/../../img/hexo-noteimage-20220122173120029.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">search</span>:</span><br><span class="line">  <span class="attr">path</span>: search.<span class="property">xml</span></span><br><span class="line">  <span class="attr">field</span>: post # <span class="attr">post</span>:文章范围、<span class="attr">page</span>:页面范围、<span class="attr">all</span>:覆盖所有</span><br><span class="line">  <span class="attr">content</span>: <span class="literal">true</span> # 内容是否包含每一篇文章的全部内容</span><br><span class="line">  <span class="attr">template</span>:  # ./search.<span class="property">xml</span> 指定定制的<span class="variable constant_">XML</span>模板</span><br></pre></td></tr></table></figure><p>复制</p><p>&lt;3&gt;修改主题配置文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>复制</p><blockquote><p>测试结果</p></blockquote><p><img src="/../../img/hexo-noteimage-20220122173036932.png" alt="img"></p><h2 id="valine评论表情加载失败">valine评论表情加载失败</h2><p>解决：</p><h2 id></h2>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>butterfly主题下更换字体</title>
      <link href="/2022/07/24/hexo/butterfly%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93/"/>
      <url>/2022/07/24/hexo/butterfly%E4%B8%BB%E9%A2%98%E4%B8%8B%E6%9B%B4%E6%8D%A2%E5%AD%97%E4%BD%93/</url>
      
        <content type="html"><![CDATA[<h1>butterfly主题下更换字体</h1><img src="/../../img/photo-1566978862346-73282aa378a4" alt="black alphabet poster" style="zoom:50%;"><h2 id="创建font文件夹">创建font文件夹</h2><p>在<code>themes/butterfly/source/</code>下创建<code>font</code>文件夹</p><p>将<code>HarmonyOS_Sans_SC_Regular.ttf</code>和<code>JetBrainsMono-Regular.ttf</code>放进<code>font</code></p><h2 id="创建css">创建css</h2><p>在<code>themes/butterfly/source/css/</code>下创建<code>font.css</code></p><p>编辑<code>font.css</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS</span><br><span class="line">@font-face&#123;</span><br><span class="line">    font-family: &#x27;JetBrains Mono&#x27;;</span><br><span class="line">    font-display: swap;</span><br><span class="line">    src: url(&#x27;../font/JetBrainsMono-Regular.ttf&#x27;) format(&quot;truetype&quot;);</span><br><span class="line">&#125;</span><br><span class="line">@font-face&#123;</span><br><span class="line">    font-family: &#x27;HarmonyOS Sans SC&#x27;;</span><br><span class="line">    font-display: swap;</span><br><span class="line">    src: url(&#x27;../font/HarmonyOS_Sans_SC_Regular.ttf&#x27;) format(&quot;truetype&quot;);</span><br><span class="line">&#125;</span><br><span class="line">body &#123;</span><br><span class="line">    font-family: &#x27;JetBrains Mono&#x27;,&#x27;HarmonyOS Sans SC&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="编辑-config-butterfly-yml">编辑<code>_config.butterfly.yml</code></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YAML</span><br><span class="line"># Inject</span><br><span class="line"># Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line"># 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/font.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="字体下载">字体下载</h2><p>推荐几个免费的字体网站：</p><ul><li><a href="https://www.fontspace.com/">Free Fonts 字体</a></li><li><a href="http://www.googlefonts.net/">Google Fonts | 谷歌字体中文版</a></li><li><a href="https://github.com/adobe-fonts">Adobe Fonts</a></li><li><a href="https://www.zcool.com.cn/special/zcoolfonts/">站酷字库 - 付费字体 &amp; 免费字体 - 站酷 (ZCOOL)</a></li><li><a href="http://www.fonts.net.cn/">字体天下 - 提供各类字体的免费下载和在线预览服务</a></li><li><a href="https://github.com/microsoft/cascadia-code">https://github.com/microsoft/cascadia-code</a></li></ul><p>最后一个是微软的开源连体字，作为代码字体是很舒服的。</p><h2 id="开始修改">开始修改</h2><p>首先创建一个 css 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS</span><br><span class="line">@font-face &#123;</span><br><span class="line">  font-family: &#x27;CascadiaCodePL&#x27;;</span><br><span class="line">  font-display: swap;</span><br><span class="line">  src: url(&#x27;/butterflyChange/fonts/CascadiaCodePL.ttf&#x27;) format(&quot;truetype&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>url</code> 可自行修改，可以支持放在你的 CDN 里哦，后面的 format 是必须字段，转换字体格式，<code>font-display: swap;</code> 可以保证我们的字体文件在没有加载完成之前文字使用默认字体，具体用法可以自行百度哦</p><p>那么如果你的字体是其他格式的呢怎么办？不用怕，这里给你提供常见的格式示例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CSS</span><br><span class="line"></span><br><span class="line">@font-face &#123;</span><br><span class="line">   font-family: &#x27;webfont&#x27;;</span><br><span class="line">   font-display: swap;</span><br><span class="line">   src: url(&#x27;.eot&#x27;);  /*IE9*/</span><br><span class="line">   src: url(&#x27;.eot&#x27;) format(&#x27;embedded-opentype&#x27;),  /* IE6-IE8 */</span><br><span class="line">        url(&#x27;.woff2&#x27;) format(&#x27;woff2&#x27;),</span><br><span class="line">        url(&#x27;.woff&#x27;) format(&#x27;woff&#x27;),  /*chrome、firefox */</span><br><span class="line">        url(&#x27;.ttf&#x27;) format(&#x27;truetype&#x27;),  /* chrome、firefox、opera、Safari, Android, iOS 4.2+*/</span><br><span class="line">        url(&#x27;.svg&#x27;) format(&#x27;svg&#x27;);  /* iOS 4.1- */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<code>font-family</code> 字段是可以自己定义的哦</p><p>如果你要修改全局字体，请在 <code>butterfly.yml</code> 里修改 <code>inject</code> ，将刚才创建的 css 文件引入：</p><p><a href="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200802205602.png"><img src="/../../img/20200802205602.png" alt="inject"></a></p><p>inject</p><p>然后修改 <code>butterfly.yml</code> 中的 <code>font-family</code> ：</p><p><a href="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200802205707.png"><img src="/../../img/20200802205707.png" alt="font-family"></a></p><p>font-family</p><p>第一个就是全局字体，第二个是代码块的字体，你可以同时在刚才的那个 css 文件里引入两个字体文件哦，然后吧 <code>font-family</code> 的值写在这里就好了呀。</p><p>如果你还要修改博客左上角 logo 和首页的你名字的字体例如：</p><p><a href="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200802205945.png"><img src="/../../img/20200802205945.png" alt="logo"></a></p><p>logo</p><p>就要把这里的字体文件也引入刚才的 css 文件里，然后修改 <code>butterfly.yml</code> ：</p><p><a href="https://cdn.jsdelivr.net/gh/laugh0608/CDN/img/20200802210053.png"><img src="/../../img/20200802210053.png" alt="配置"></a></p><p>配置</p><p>把这里的 <code>font-family</code> 修改为你要设置的字体的就行啦，如果你把上面这三个字体都在同一个 css 里用 <code>inject</code> 引入的话这里的 <code>font_link</code> 就不用填了哦，但是建议你把 logo 的字体单独引一个 css 文件。</p><p>还有一件事！！！</p><p><code>font-family</code> 不要只填你引入的字体，在后面多放几个备用字体，用默认的就行了，比如微软雅黑什么的，防止字体文件引入失败导致字体不显示，其实 css 里的 <code>font-display</code> 已经解决了这个问题，但是以防万一嘛</p><p>还有一件事！</p><p>最重要的是一定要注意字体的版权问题，不然小心律师函警告哦～</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/23/hexo/hello-world/"/>
      <url>/2022/07/23/hexo/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p><img src="/../../img/photo-1460467820054-c87ab43e9b59" alt="welcome signage on focus photography"></p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pug模板入门</title>
      <link href="/2022/07/17/pug%E6%A8%A1%E6%9D%BF%E5%85%A5%E9%97%A8/pug%E6%A8%A1%E6%9D%BF%E5%85%A5%E9%97%A8/"/>
      <url>/2022/07/17/pug%E6%A8%A1%E6%9D%BF%E5%85%A5%E9%97%A8/pug%E6%A8%A1%E6%9D%BF%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>Pug原名不叫Pug，是大名鼎鼎的jade，后来由于商标的原因，改为Pug，哈巴狗。其实只是换个名字，语法都与jade一样。丑话说在前面，Pug有它本身的缺点——可移植性差，调试困难，性能并不出色，但使用它可以加快开发效率。本文将详细介绍pug模板引擎</strong></p><img src="/../img/img" alt="初识pug（jade）" style="zoom:50%;"><h2 id="1-pug中文文档参考">1.pug中文文档参考</h2><p><a href="https://pug.bootcss.com/api/getting-started.html">https://pug.bootcss.com/api/getting-started.html</a><br><img src="/../img/20190113161216423.png" alt="在这里插入图片描述"></p><h2 id="2-入门示例">2.入门示例</h2><h3 id="1-在原始目录下建立一个views目录，来存放该-test-pug">1.在原始目录下建立一个views目录，来存放该 test.pug</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        script</span><br><span class="line">        style</span><br><span class="line">    body</span><br><span class="line">12345</span><br></pre></td></tr></table></figure><h3 id="2-把该代码输出成一个html文件-我们可以在源目录下新建一个build目录来存放生成的文件，那就将刚才的app-js写成">2.把该代码输出成一个html文件,我们可以在源目录下新建一个build目录来存放生成的文件，那就将刚才的app.js写成</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Var jade = require(&#x27;pug&#x27;);//加载jade引擎</span><br><span class="line">var fs = require(&#x27;fs&#x27;)</span><br><span class="line"></span><br><span class="line">var str = jade.renderFile(&#x27;./views/test.pug&#x27; ,&#123;pretty : true &#125;); //pretty : ture 相当于beauty格式化一下输出的代码</span><br><span class="line">fs.writeFile(&#x27;./build/test.html&#x27; ,str , function(err)&#123;</span><br><span class="line">    if (err)</span><br><span class="line">        console.log(&quot;编译失败&quot;);</span><br><span class="line">    else</span><br><span class="line">        console.log(&quot;编译成功&quot;);</span><br><span class="line">&#125;)</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure><h3 id="3-生成的html页面">3.生成的html页面</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;script&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;&lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h3 id="4-关于class-style的写法——属性放在（）里面，用逗号分隔">4.关于class/style的写法——属性放在（）里面，用逗号分隔</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        script</span><br><span class="line">        style</span><br><span class="line">    body</span><br><span class="line">        div(class=[&#x27;aaa&#x27;,&#x27;bbb&#x27;,&#x27;ccc&#x27;])</span><br><span class="line">        //class也可以写成div(style=&quot;aaa bbb ccc&quot;)</span><br><span class="line">        div(style=&#123;width:&#x27;200px&#x27; ,height:&#x27;300px&#x27; ,background:&#x27;red&#x27;&#125;)</span><br><span class="line">        //style也可以写成div(style=&quot;width:200px;xxxx&quot;)</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure><p>运行一下node.js，则输出结果为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;script&gt;&lt;/script&gt;</span><br><span class="line">    &lt;style&gt;&lt;/style&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div class=&quot;aaa bbb ccc&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!--class也可以写成div(style=&quot;aaa bbb ccc&quot;)--&gt;</span><br><span class="line">    &lt;div style=&quot;width:200px;height:300px;background:red;&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;!--style也可以写成div(style=&quot;width:200px;xxxx&quot;)--&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">123456789101112</span><br></pre></td></tr></table></figure><p>关于上方输出格式，可以发现，style是可以用json传输的，class是可以采用数组传输进去的。<br>因此可以在node.js中直接插入相关属性数据，然后在jade文件调用，这样就可以很方便的生成不同框架的模板文件<br>如果你想插入相关属性数据，并调用的话，应当在node.js中的 jade.renderFile中如此添加数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var pug = require(&#x27;pug&#x27;);</span><br><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line"></span><br><span class="line">var str = pug.renderFile(&#x27;./test.pug&#x27;, &#123;</span><br><span class="line">pretty: true,</span><br><span class="line">divsytle1: &#123;</span><br><span class="line">width: &#x27;200px&#x27;,</span><br><span class="line">height: &#x27;300px&#x27;,</span><br><span class="line">background: &#x27;blue&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">classarrays:[</span><br><span class="line">&#x27;classname1&#x27;,</span><br><span class="line">&#x27;classname2&#x27;</span><br><span class="line">]</span><br><span class="line">&#125;);</span><br><span class="line">123456789101112131415</span><br><span class="line">fs.writeFile(&#x27;./build/test.html&#x27;, str, function (err) &#123;</span><br><span class="line">if (err)</span><br><span class="line">console.log(&quot;编译失败&quot;+err);</span><br><span class="line">else</span><br><span class="line">console.log(&quot;编译成功&quot;);</span><br><span class="line">&#125;);</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>并在test.jade文件中修改如下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        script</span><br><span class="line">        style</span><br><span class="line">    body</span><br><span class="line">        div(class=arr)</span><br><span class="line">        div(style=cls)</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><p>运行一下，结果是跟刚才的相同</p><h3 id="5、在pug标签中输入数据时，记得在相应标签后，加一个空格">5、在pug标签中输入数据时，记得在相应标签后，加一个空格</h3><p>我们通常前端编程的时候，一般都会写到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;名称：DobTink</span><br><span class="line">  &lt;div&gt;年龄：15&lt;/div&gt;</span><br><span class="line">  &lt;script src=&quot;a.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    window.onload = function () &#123;</span><br><span class="line">        console.log(&#x27;测试输出&#x27;);&#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/div&gt;&lt;a href=&quot;http://www.dobtink.com&quot;&gt;首页&lt;/a</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>而在jade中，我们需要这样来写这实际上是最常见的情况，文本只需要和标签名隔开一个空格即可,<br>有时可能想要写一个大段文本块。比如嵌入脚本或者样式。只需在标签后面接一个 .即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div 名称：DobTink</span><br><span class="line">    div 年龄：15</span><br><span class="line">    script(src=&#x27;a.js&#x27;)</span><br><span class="line">    script. //注意在script后面加个点&quot;.&quot;</span><br><span class="line">        window.onload = function () &#123;</span><br><span class="line">            console.log(&#x27;测试输出&#x27;);&#125;</span><br><span class="line">a(href=&quot;http://www.dobtink.com&quot;) 首页</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h3 id="6、在pug中使用if-else-switch-while-等语句">6、在pug中使用if else switch while 等语句</h3><p>pug中的 if 使用<br>Pug 的条件判断的一般形式的括号是可选的，所以可以省略掉开头的 -，效果完全相同。类似一个常规的 JavaScript 语法形式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">    head</span><br><span class="line">    body</span><br><span class="line">        -var a = 15;</span><br><span class="line">        if a%2 == 0</span><br><span class="line">            div(style=&#123;background:&#x27;red&#x27;&#125;)</span><br><span class="line">        else</span><br><span class="line">            div(style=&#123;background:&#x27;green&#x27;&#125;)</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>pug中的 switch 使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">    head</span><br><span class="line">    body</span><br><span class="line">        -var a = 3;</span><br><span class="line">        case a</span><br><span class="line">            when 0</span><br><span class="line">                div aaa</span><br><span class="line">            when 1</span><br><span class="line">                div bbb</span><br><span class="line">            when 2</span><br><span class="line">                div ccc</span><br><span class="line">            when 3</span><br><span class="line">                div ddd</span><br><span class="line">            default</span><br><span class="line">                div default</span><br><span class="line">123456789101112131415</span><br></pre></td></tr></table></figure><h3 id="7-循环">7.循环</h3><p>Pug 目前支持两种主要的迭代方式： each 和 while</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ul</span><br><span class="line">    each val in [1, 2, 3, 4, 5]</span><br><span class="line">        li= val</span><br><span class="line">123</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li&gt;1&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;2&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;3&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;4&lt;/li&gt;</span><br><span class="line">  &lt;li&gt;5&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h3 id="8-代码1">8. 代码1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html</span><br><span class="line">head</span><br><span class="line">title pug学习</span><br><span class="line">meta(charset=&#x27;utf-8&#x27;)</span><br><span class="line">script.</span><br><span class="line">var message = &#x27;hello pug&#x27;;</span><br><span class="line">window.function()&#123;</span><br><span class="line">// alert(message);</span><br><span class="line">&#125;</span><br><span class="line">body</span><br><span class="line">div(id=&#x27;contaner&#x27; class=&#x27;style1&#x27;)</span><br><span class="line">p(id=&#x27;p1&#x27; style=&#123;color:&#x27;red&#x27;,fontsize:&#x27;20px&#x27;&#125;) 用户名:</span><br><span class="line">input(name=&#x27;username&#x27; type=&#x27;text&#x27; placeholder=&#x27;请输入用户名&#x27; value=username)</span><br><span class="line">br</span><br><span class="line">p 密码:</span><br><span class="line">input(name=&#x27;password&#x27; type=&quot;password&quot; placeholder=&#x27;请输入密码&#x27; value=password)</span><br><span class="line"></span><br><span class="line">-var k = 10;</span><br><span class="line">if(k % 2 === 0)</span><br><span class="line">p 登录成功</span><br><span class="line">else </span><br><span class="line">p 用户名密码出错</span><br><span class="line">div</span><br><span class="line">ul</span><br><span class="line">each item in week</span><br><span class="line">li= item</span><br><span class="line">1234567891011121314151617181920212223242526</span><br></pre></td></tr></table></figure><h3 id="9-Pug使用css样式">9. Pug使用css样式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//-引入内部样式表</span><br><span class="line">style.</span><br><span class="line">#container&#123;</span><br><span class="line">background-color: gray;</span><br><span class="line">&#125;</span><br><span class="line">//-引入外部样式表</span><br><span class="line">link(rel=&quot;stylesheet&quot;, href=&quot;css/my.css&quot;)</span><br><span class="line">1234567</span><br></pre></td></tr></table></figure><h2 id="3-Html代码转pug代码">3.Html代码转pug代码</h2><p><a href="https://html2jade.org/">https://html2jade.org/</a><br><img src="/../img/2019011316294670.png" alt="在这里插入图片描述"></p><h2 id="4-继承">4.继承</h2><p>Pug 支持使用 block 和 extends 关键字进行模板的继承。一个称之为“块”（block）的代码块，可以被子模板覆盖、替换<br><strong>示例: 定义父模板 layout.pug</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- layout.pug</span><br><span class="line">html</span><br><span class="line">head</span><br><span class="line">title 我的站点 - #&#123;title&#125;</span><br><span class="line">block scripts</span><br><span class="line">script(src=&#x27;/jquery.js&#x27;)</span><br><span class="line">body</span><br><span class="line">block content</span><br><span class="line">block foot</span><br><span class="line">#footer</span><br><span class="line">p 一些页脚的内容</span><br><span class="line">1234567891011</span><br></pre></td></tr></table></figure><p><strong>子模板 page-a.pug</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- page-a.pug</span><br><span class="line">extends layout.pug</span><br><span class="line">block scripts</span><br><span class="line">script(src=&#x27;/jquery.js&#x27;)</span><br><span class="line">script(src=&#x27;/my.js&#x27;)</span><br><span class="line">block content</span><br><span class="line">div 正文内容</span><br><span class="line">p 子内容</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><h2 id="5-包含-include">5. 包含 include</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//- includes/head.pug</span><br><span class="line">head</span><br><span class="line">title 我的网站</span><br><span class="line">meta(charset=&#x27;utf-8&#x27;)</span><br><span class="line">script.</span><br><span class="line">var message = &#x27;hello pug&#x27;;</span><br><span class="line">window.function()&#123;</span><br><span class="line">// alert(message);</span><br><span class="line">&#125;</span><br><span class="line">123456789</span><br><span class="line">html</span><br><span class="line">//- head</span><br><span class="line">//- title pug学习</span><br><span class="line">//- meta(charset=&#x27;utf-8&#x27;)</span><br><span class="line">//- script.</span><br><span class="line">//- var message = &#x27;hello pug&#x27;;</span><br><span class="line">//- window.function()&#123;</span><br><span class="line">//- // alert(message);</span><br><span class="line">//- &#125;</span><br><span class="line">include head.pug   </span><br><span class="line"></span><br><span class="line">body</span><br><span class="line">div(id=&#x27;contaner&#x27; class=&#x27;style1&#x27;)</span><br><span class="line">12345678910111213</span><br></pre></td></tr></table></figure><h2 id="6-注释">6. 注释</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//单行注释，会显示在编译后的html代码中                       &lt;!--单行注释，会显示在编译后的html代码中 --&gt;</span><br><span class="line">div 单行注释                                                  &lt;div&gt;单行注释&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//- 单行注释，不会显示在编译后的html代码中</span><br><span class="line">div 单行注释                                                   &lt;div&gt;单行注释&lt;/div&gt; </span><br><span class="line"></span><br><span class="line">//-</span><br><span class="line">多单注释</span><br><span class="line">不显示在html代码中</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure><h2 id="7-Express框架集成pug模板">7. Express框架集成pug模板</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//设置默认模板引擎是pug</span><br><span class="line">app.engine(&#x27;.pug&#x27;, pug.__express);</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;pug&#x27;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Pug </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo自定义一个不渲染的页面</title>
      <link href="/2022/07/17/hexo/hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%B8%B2%E6%9F%93%E7%9A%84%E9%A1%B5%E9%9D%A2/"/>
      <url>/2022/07/17/hexo/hexo%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E4%B8%8D%E6%B8%B2%E6%9F%93%E7%9A%84%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p><a href="https://so.csdn.net/so/search?q=Hexo&amp;spm=1001.2101.3001.7020">Hexo</a> 是一个轻量、快速，简单和强大的博客框架，当我们需要发布博文的时候，只需要将写好的文章（MarkDown文件）放入本地的 <code>\source\_posts</code> 文件夹，然后再推送上去就行了，原理就是当我们在执行 <code>hexo g</code> 命令时，<code>.md</code> 文件就会被转化成 HTML 文件，但是有时候我们需要新建一个独立的页面，这个页面不使用主题的渲染，具有自己独立的样式，可以放一些自己的作品，相册什么的，以下就介绍这种独立页面的实现方法。</p><h3 id="方法一：">方法一：</h3><p>使用 Hexo 提供的跳过渲染配置，在博客根目录的配置文件 <code>_config.yml</code> 里找到 <code>skip_render</code> 关键字，在后面添加想要跳过渲染的页面，比如我们创建 <code>\source\about\index.html</code>， 配置文件填写：<code>skip_render: about\**</code>，那么就表示 <code>\source\about</code> 里所有的文件将跳过渲染，里面的文件将会被直接复制到 public 文件夹，此时就会得到一个独立的 about 页面；官方文档：<a href="https://hexo.io/docs/configuration">https://hexo.io/docs/configuration</a></p><h3 id="方法二：">方法二：</h3><p>在文章头部的 Front-matter 里添加配置 <code>layout: false</code> 来跳过渲染配置，比如我们要使 about 页面跳过渲染，创建 <code>\source\about\index.md</code>，将这个页面的相关 HTML 代码写进<code>.md</code>文件并保存，然后在 <code>index.md</code> 的头部写入：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br><span class="line">&#123;% raw %&#125;</span><br><span class="line">xxxxxxxxxxxxx</span><br><span class="line">xx HTML代码 xx</span><br><span class="line">xxxxxxxxxxxxx</span><br><span class="line">&#123;% endraw %&#125;</span><br><span class="line">12345678</span><br></pre></td></tr></table></figure><p>PS：Front-matter 是 <code>.md</code> 文件最上方以 — 分隔的区域，用于指定个别文件的变量，官方文档：<a href="https://hexo.io/docs/front-matter">https://hexo.io/docs/front-matter</a><br><code>.md</code>文件中的 HTML 代码要用 <code>` 和 `</code> 包起来，使其能正确编译里面的代码</p><p>效果</p><p><img src="/../img/photo-1507721999472-8ed4421c4af2" alt="两本软装书上的白色智能手机"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo写博客</title>
      <link href="/2022/07/15/%E5%8D%9A%E6%96%87%E5%86%99%E4%BD%9C%E7%9B%B8%E5%85%B3/%E5%8D%9A%E6%96%87%E5%86%99%E4%BD%9C%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/07/15/%E5%8D%9A%E6%96%87%E5%86%99%E4%BD%9C%E7%9B%B8%E5%85%B3/%E5%8D%9A%E6%96%87%E5%86%99%E4%BD%9C%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="编写文章的工具">编写文章的工具</h2><h3 id="1-Markdown">1.Markdown</h3><p>写博客文章我们会使用<code>Markdown</code>来排版，它通过一些简单的标记语法让文本具有一定的格式。写作体验和<code>Word</code>这种机械式的排版工具比起来完全不是一个<code>level</code>的。</p><h3 id="2-Typora">2.Typora</h3><p>接下来要介绍的主角是一个<code>Markdown</code>编辑器，它能让我们的写作体验达到顶峰。我个人是离不开这个编辑器了，它就是<a href="https://link.zhihu.com/?target=https%3A//www.typora.io/">Typora</a></p><h3 id="好处">好处</h3><p>下面是我觉得比较好的两个点：</p><p>①实时预览：在<code>Typora</code>中我们输入标记语法就能实时看到排版效果，解决了传统<code>Markdown</code>编辑器左右分屏式看起来麻烦的烦恼。</p><p>②快捷键输入：很多标记语法我们都可以使用快捷键输入，免去了手动敲语法的烦恼。</p><blockquote><p><strong>当然还有很多强大的功能需要我们细品，这里就不一一赘述了，大家自行探索~</strong></p></blockquote><h3 id="常用快捷键和语法">常用快捷键和语法</h3><p>标题：Ctrl+1、2、3…对应一、二、三…级标题（光标定位到需要设置为标题的行，按快捷键）</p><p><strong>加粗</strong>：Ctrl+B（选中要加粗的文本，按快捷键）</p><p><em>斜体</em>：Ctrl+I（选中要设置斜体的文本，按快捷键）</p><p>下划线：Ctrl+U（选中要加下划线的文本，按快捷键）</p><p>删除线：Alt+Shift+5（选中要加删除线的文本，按快捷键）</p><p><code>代码片段</code>：Ctrl+Shift+`（选中要设置为代码片段的文本，按快捷键）</p><p>代码块：Ctrl+Shift+K（任意位置按快捷键，选择编程语言然后在代码块中输入代码）</p><p>切换到下一行：Ctrl+Enter（任意位置按快捷键，在代码块中可以跳出代码块另起一行）</p><p><a href="https://link.zhihu.com/?target=https%3A//www.baidu.com/">链接</a>：Ctrl+K（先复制链接，然后选中要加链接的文本，按快捷键。Ctrl+左键点击文本可跳转到对应链接）</p><p>取消格式：再次按相同的快捷键即可</p><p>有序列表：数字+点+空格</p><p>任务列表：加号或减号+空格</p><p>切换到列表下一行：Space+Enter</p><p>嵌套列表：按Tab键</p><p>退出列表：按 Shift+Tab</p><p>插入表格：Ctrl+T</p><p>引用：输入&gt;后面加空格，或者Ctrl+Shift+Q</p><h2 id="Hexo文章管理">Hexo文章管理</h2><h3 id="1-创建一个md文件">1.创建一个md文件</h3><p>md文件也就是<code>Markdown</code>文件，通过以下命令来创建：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">$ hexo new &lt;title&gt;</span><br><span class="line">$ hexo new &quot;我的第一篇文章&quot;</span><br></pre></td></tr></table></figure><h3 id="2-布局（layout）">2.布局（layout）</h3><ul><li>创建md文件时，我们可以指定布局</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;$ hexo new page &quot;我的页面&quot;</span><br></pre></td></tr></table></figure><ul><li>布局有三种：<code>post</code>（文章）、<code>draft</code>（草稿）、<code>page</code>（页面）</li></ul><p>在新建文件时，Hexo 会根据 <code>scaffolds</code> 文件夹内相对应的文件（可以理解为模板）来建立md文件：</p><p><img src="/../img/v2-2683cfb7e862381166e609ef37210a99_720w.png" alt="img"></p><ul><li>如果没有指定布局类型，则为默认布局<code>post</code>，可以在站点配置文件修改 <code>default_layout</code> 参数来修改默认布局。</li><li>当我们创建不同布局的md文件时，它们会存储在不同路径：</li></ul><p><img src="/../img/v2-81c1aa7b55f1ae6767b3563127a22156_720w.jpg" alt="img"></p><blockquote><p>对于独立页面来说，Hexo 会创建一个以标题为名字的目录，并在目录中放置一个 <code>index.md</code> 文件，页面布局顾名思义就是用来DIY我们博客页面的。</p></blockquote><h3 id="3-草稿（draft）">3.草稿（draft）</h3><p><code>draft</code>这种布局在建立时会被保存到 <code>source/_drafts</code> 文件夹中，但不会显示在页面上，如果我们不想某一篇文章显示在页面上，那么就可以把它移动到<code>_drafts</code>文件夹中。</p><ul><li>我们可在启动服务器时加上 <code>--draft</code> 参数来查看草稿。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo server --draft</span><br></pre></td></tr></table></figure><ul><li>还可以在站点配置文件中把 <code>render_drafts</code> 参数设为 <code>true</code> 来预览草稿。</li><li>我们可以通过 <code>publish</code> 命令将草稿发布文章或者页面，它将会被移动到指定的文件夹。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><h3 id="4-Front-matter">4.Front-matter</h3><p>当我们创建一个md文件后，打开后会看到一些内容，这些称为<code>Front-matter</code>，它是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span> <span class="comment"># 标题就是我们上面创建的时候指定的名字</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span> <span class="comment"># 文件创建的时间</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><p>在<code>Typora</code>中我们在md文件的首行（必须是第一行）输入<code>---</code> ，然后按回车就可以插入<code>Front-matter</code>了。</p></blockquote><p>Front-matter预定义参数</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">layout  布局  默认为true，如果你不想你的文章被处理，可以设置为false</span><br><span class="line">title  标题  标题会显示在最上方居中位置     </span><br><span class="line">date  建立日期    如果不指定则为默认值-文件创建日期，可以自定义。</span><br><span class="line">update  更新日期  如果不指定则为默认值-文件修改后重新生成静态文件的日期。</span><br><span class="line">comments  是否开启文章的评论功能 默认值为true</span><br><span class="line">tags  标签（不适用于页面page布局）</span><br><span class="line">categoreies  分类（不适用于页面page布局）</span><br><span class="line">permalink  覆盖文章网址</span><br><span class="line">keywords  仅用于 meta 标签和 Open Graph 的关键词（不推荐使用）</span><br></pre></td></tr></table></figure><h3 id="为文章添加分类与标签">为文章添加分类与标签</h3><p>只有文章（post布局）支持分类和标签，需要在<code>Front-matter</code>中设置。分类有层级关系，标签没有。</p><p>举个例子：<br>1）下面文章它的标签是：Hexo、博客<br>2）分类是： 个人博客 &gt; Hexo博客<br>3）“Hexo博客” 是 “个人博客” 的子分类</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">个人博客（第一层级）</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo博客（第二层级）</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Hexo</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">博客</span></span><br></pre></td></tr></table></figure><h3 id="为文章添加多个分类">为文章添加多个分类</h3><p>1）下面文章属于三个分类：日常 &gt; 生活，日常 &gt; 随想，日记<br>2）其中生活、随想为日常的子分类，日常和日记为同级分类</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> [<span class="string">日常</span>, <span class="string">生活</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">日常</span>, <span class="string">随想</span>]</span><br><span class="line"><span class="bullet">-</span> [<span class="string">日记</span>]</span><br></pre></td></tr></table></figure><h2 id="基本操作">基本操作</h2><h3 id="常用命令">常用命令</h3><ul><li><strong>清除缓存：</strong><code>hexo clean</code></li><li><strong>生成静态文件：</strong><code>hexo generate</code>可简写为 <code>hexo g</code></li><li><strong>启动服务器：</strong><code>hexo server</code>或者 <code>hexo s</code> 常用参数：<code>-p（--port）</code>重设端口</li><li><strong>部署：</strong><code>hexo deploy</code>可简写为<code>hexo d</code>，用于将网站部署到服务器上。（暂时用不到，目前都是在本地，后面我们将博客托管到<code>GitHub Pages</code>或<code>Gitee Pages</code>时才会用到此命令）<br>常用参数：<code>-g（--generate）</code>，<code>hexo d -g</code>部署前预先生成静态文件，等同于 <code>hexo g -d</code></li></ul><p>**一般发布文章或者修改博客后需要这些操作：**清除缓存&gt;生成静态文件&gt;启动服务器，测试没问题后再部署。</p><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们可以写成一条命令</span></span><br><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><blockquote><p>更多细节请查看：<a href="https://link.zhihu.com/?target=https%3A//hexo.bootcss.com/docs/">Hexo官方文档</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面配置与文章页配置</title>
      <link href="/2022/07/15/%E5%8D%9A%E6%96%87%E5%86%99%E4%BD%9C%E7%9B%B8%E5%85%B3/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%96%87%E7%AB%A0%E9%A1%B5%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/07/15/%E5%8D%9A%E6%96%87%E5%86%99%E4%BD%9C%E7%9B%B8%E5%85%B3/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE%E4%B8%8E%E6%96%87%E7%AB%A0%E9%A1%B5%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>Front-matter<br>Front-matter 是 markdown 文件最上方以 — 分隔的区域，用于指定个别档案的变数。</p><p>Page Front-matter 用于页面配置<br>Post Front-matter 用于文章页配置<br>如果标注可选的参数，可根据自己需要添加，不用全部都写在markdown里</p><p>Page Front-matter</p><p><img src="/../../img/lin-.jpg" alt="BOOK"></p><p>写法解释<br>title【必需】页面标题<br>date【必需】页面创建日期<br>type【必需】标籤、分类和友情链接三个页面需要配置<br>updated【可选】页面更新日期<br>description【可选】页面描述<br>keywords【可选】页面关键字<br>comments【可选】显示页面评论模块(默认 true)<br>top_img【可选】页面顶部图片<br>mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aside【可选】显示侧边栏 (默认 true)<br>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)<br>Post Front-matter</p><p>写法解释<br>title【必需】文章标题<br>date【必需】文章创建日期<br>updated【可选】文章更新日期<br>tags【可选】文章标籤<br>categories【可选】文章分类<br>keywords【可选】文章关键字<br>description【可选】文章描述<br>top_img【可选】文章顶部图片<br>cover【可选】文章缩略图(如果没有设置top_img,文章页顶部将显示缩略图，可设为false/图片地址/留空)<br>comments【可选】显示文章评论模块(默认 true)<br>toc【可选】显示文章TOC(默认为设置中toc的enable配置)<br>toc_number【可选】显示toc_number(默认为设置中toc的number配置)<br>toc_style_simple【可选】显示 toc 简洁模式<br>copyright【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)<br>copyright_author【可选】文章版权模块的文章作者<br>copyright_author_href【可选】文章版权模块的文章作者链接<br>copyright_url【可选】文章版权模块的文章连结链接<br>copyright_info【可选】文章版权模块的版权声明文字<br>mathjax【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)<br>katex【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)<br>aplayer【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置<br>highlight_shrink【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)<br>aside【可选】显示侧边栏 (默认 true)<br>标籤页<br>前往你的 Hexo 博客的根目录</p><p>输入hexo new page tags</p><p>你会找到source/tags/index.md这个文件</p><p>修改这个文件：</p><p>记得添加 type: “tags”</p><p>type: “tags”</p><p>分类页<br>前往你的 Hexo 博客的根目录</p><p>输入hexo new page categories</p><p>你会找到source/categories/index.md这个文件</p><p>修改这个文件：</p><p>记得添加 type: “categories”</p><p>type: “categories”</p><p>友情链接<br>为你的博客创建一个友情链接！</p><p>创建友情链接页面<br>前往你的 Hexo 博客的根目录</p><p>输入 hexo new page link</p><p>你会找到source/link/index.md这个文件</p><p>修改这个文件：</p><p>记得添加 type: “link”</p><p>MARKDOWN</p><p>title: 友情链接<br>date: 2018-06-07 22:17:49</p>]]></content>
      
      
      
        <tags>
            
            <tag> writing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BioCl Hydrolysis Method Information Summary</title>
      <link href="/2022/07/10/%E5%A5%87%E5%A6%99%E5%8C%96%E5%AD%A6/BioCl%20Hydrolysis%20Method%20Information%20Summary/"/>
      <url>/2022/07/10/%E5%A5%87%E5%A6%99%E5%8C%96%E5%AD%A6/BioCl%20Hydrolysis%20Method%20Information%20Summary/</url>
      
        <content type="html"><![CDATA[<h1>BioCl Hydrolysis Method Information Summary</h1><h2 id="Literature-report-information-summary">Literature report information summary</h2><h3 id="Chinese-literature">Chinese literature</h3><h4 id="Chinese-paper">Chinese paper</h4><h5 id="硝酸铋转化水解法制备片状-BiOCl-粉末的研究-王云燕，彭文杰-中南大学冶金科学与工程学院，湖南-长沙">硝酸铋转化水解法制备片状 BiOCl 粉末的研究 (王云燕，彭文杰 ;中南大学冶金科学与工程学院，湖南 长沙)</h5><h6 id="摘-要">摘 要</h6><p>​对硝酸铋转化水解法制备 BiOCl 粉末进行了详细的研究，大量探索实验发现反应过程中稀释 水的量、 温度和终点 pH 值对水解过程有较大的影响。 实验结果表明： 控制 BiCl3（0.3675mol·L －1） 与 稀释水的比例为1∶4，反应温度为90～95℃，终点 pH 值为1～2的条件下可以制得粒度约为5～10μm 的珠光片状 BiOCl 晶体，可广泛应用作涂料、医药和化妆品方面的增白收敛剂、精细陶瓷的原料等领域。</p><h6 id="线索文献（即：本文参考文献中的有用线索）">线索文献（即：本文参考文献中的有用线索）</h6><p>2：Botar Alexandru， Paul Viorica， Patrut Adrian. Preparation of Bismuth Oxychlorido －titania Based Pearly Pigments for Glassw ork Articles</p><p>氧氯化铋-二氧化钛基玻璃制品珠光颜料的制备</p><p>12：郑国渠，唐谟堂 .BiCl3－HCl－H2O 系蒸发过程馏 余物物相研究 ［J］ .中国有色金属学报</p><p>13：郑国渠，曹华珍，唐谟堂 .氯氧铋制备高纯氧化铋过 程中除氯的研究 ［J］ .有色金属</p><p>14：Allen J Bard，Roger Parsons，Joseph Jordan . Standard Potentials in Aqueous Solution</p><p>艾伦 · J · 巴德，罗杰 · 帕森斯，约瑟夫 · 乔丹。标准潜力水溶液</p><p>4：Belskij Arkadij A ， Veviorshij Anri P， Konstantinova Lyubov I，et al.M ethod of Producing Bismuth Oxychloride Base M other － of － pearl Pigment</p><p>珍珠色素氯氧化铋基母的制备方法</p><p>5：Gimenez Francisco M alaga.Bismuth Oxychloride Formulation and Its Use in Obtaining M etallic Iridescent or M ulticolor Risual Effecs on Plastic Films and Laminates</p><p>氯氧化铋配方及其在获得塑料薄膜和层压板金属色彩或多色增强效应中的应用</p><h6 id="反应原理">反应原理</h6><p>硝酸铋转化水解法制备 BiOCl 的原理基于 下列反应：</p><p>转化 Bi（ NO3）3＋3NaCl＝BiCl3＋3NaNO3</p><p>水解 Bi 3+＋Cl-＋2H2O＝Bi（ OH）2Cl＋2H+</p><p>Bi（ OH）2Cl＝BiOCl↓＋ H2O</p><p>总反应为BiCl3＋H2O＝BiOCl↓＋2HCl</p><h6 id="检测方法">检测方法</h6><p>Bi 3＋ 含量的检测采用 EDT A 络合滴定法</p><p>BiOCl 中 BiONO3 的含量采 用失重法测定</p><h6 id="BiCl3浓度的影响">BiCl3浓度的影响</h6><p>控制 pH 为1.5左右，温度90 ℃左右，搅拌速度300r／min，BiCl3溶液20mL （0.3675mol／L） ，改变 BiCl3 溶液与水的比例进 行实验得到如图1的结果。</p><p><img src="/../../img/image-20220711100845862.png" alt="image-20220711100845862"></p><p>水量越大越有利于 Bi 3＋的 水解。 实验发现：随着 BiCl3∶3H2O 比值的增大， 即 Bi 3＋浓度的减小，产物 BiOCl 由白色、无光泽的 粉末逐渐转变为银白色光亮的粉末，说明浓度越 小，越有利于晶核的长大，因为只有粒径较大的晶 体才会显出光泽。 因此，选择 BiCl3与水的比例为 1∶4</p><h6 id="反应温度的影响">反应温度的影响</h6><p>体系的 pH 值控制为2.2左右，BiCl3溶液20mL， 搅拌速度300r／min，BiCl3∶H2O 为1∶4</p><p><img src="/../../img/image-20220711101032958.png" alt="image-20220711101032958"></p><p>随着温度的升高，所得产物 BiOCl 的颜色由白色逐渐变为银白色，由无光泽 变为光亮。 说明加热有利于水解反应的进行，在 60℃ 以下得不到理想的粒子，因为随着温度的 升高，晶核生长速度大于形成速度，所得 BiOCl 的粒度越来越大，颜色也就越来越亮。 因此，选择 反应温度为90～95℃</p><h6 id="终点-pH-值的影响">终点 pH 值的影响</h6><p>取 BiCl3溶液20mL，BiCl3∶H2O 为1∶4，温度为 92℃，搅拌速度300r／min</p><p>随着 pH 值的升高，滤液中 Bi 3＋含量 显著降低，Bi 3＋的转化率显著升高。 pH＞1.7时，滤液中 Bi 3＋含量检测不出，转化率达100％。 但水 解产物 BiOCl 随 pH 值的升高由银白色、很亮的 粉末逐渐变为白色、不亮的粉末。分析原因可能是 pH＜1.0～1.2时，溶液的酸度大，由于共同离子 效应，抑制了反应 Bi 3＋＋H2O＋Cl －→BiOCl＋H ＋ 向右进行，而使得转化率不高。 pH 值太高时，有 利于反应 Bi 3＋＋NO3 －＋H2O→BiONO3＋2H ＋向 右进行，生成 BiONO3白色、无光泽的粉末，另一 方面，pH 值升高，酸度减小，也有利于晶核的形 成而不利于晶核的长大，生成的 BiOCl 粒度越小 也越无光泽，所以，随着 pH 值升高，BiOCl 越来 越不亮。 酸度较大时，虽然生成的 BiOCl 为银白 色，且闪闪发光，但却结为片状。 这可能是因为酸 度太大，晶核形成很慢，而生长相对很快所致，此 时生成的 BiOCl 片状结晶相互交织在一起，亦不 能称其为粉末。 鉴于 pH＞1.7时，Bi 3＋转化率均 为100％ 的情况出现，作者又检测了转化率较高 的情况下产物 BiOCl 中 BiONO3 的含量，结果如 图3。 图3表 明 ： 随 着 pH 值 升 高 ，BiOCl 中BiONO3 的含量亦显著增大，即杂质含量显著增 加。 因 此，综 合 考 虑 Bi 3＋ 转 化 率 和 BiOCl 中 BiONO3 的含量，选择体系的 pH 值为1.0～2.0， 而且必须严格控制 pH 值才能制备出纯度较高的 BiOCl</p><p><img src="/../../img/image-20220711102648353.png" alt="image-20220711102648353"></p><h6 id="稀释水中加盐酸的影响">稀释水中加盐酸的影响</h6><p>取 pH 值为2.0，BiCl320mL，H2O 80mL，温度 92℃，搅拌速度300r／min，改变加入稀释水中的 盐酸的量进行了实验</p><p><img src="/../../img/image-20220711104623736.png" alt="image-20220711104623736"></p><p>在稀释水中提前加入少量盐酸对 BiCl3 的水解过程有很大的影响。随着盐酸加入量 的增加，滤液中 Bi 3＋的含量越来越大，Bi 3＋的转化 率显著降低，BiOCl 由白色粉末逐渐变为银白色 发光的片状结晶。 过量的盐酸不利于 BiCl3 的水 解是因为在 H ＋很高时，不利于反应 Bi 3＋＋H2O＋ Cl － →BiOCl＋H ＋向右进行，所以 Bi 3＋的转化率 低；而盐酸浓度过小时，则沉淀生成速度过快，所 得的粒子粒度小且不均匀，因而 BiOCl 为白色无 光泽的粉末。所以，选择在稀释水中提前加3.5～ 8mL 稀盐酸 （1∶1） 为宜，即为总稀释水体积的 1.7％～3.9％</p><h6 id="BiCl3滴加速度的影响">BiCl3滴加速度的影响</h6><p>取 BiCl320mL，H2O 80mL，并在水中加 入4mL 盐酸 （1∶1） ，温度92℃，pH 值为2.0 左右，搅拌速度为300r／min，改变 BiCl3滴加速 度分别为1.33，2.67，3.08，4.00，5.15，6.50， 2003年第3期 王云燕等： 硝酸铋转化水解法制备片状 BiOCl 粉末的研究 23 10.3mL／min 进行 BiCl3的水解</p><p>实验发现随着 BiCl3滴加速度的增大，BiOCl 由银白色、 光亮、 粘 结在一起的片状结晶逐渐变为白色、 无光泽的粉末</p><p>随着 BiCl3滴加速度的增 大，BiOCl 的粒度越来越小。 说明滴加速度越大， 越有利于晶核形成而不利于晶粒长大，而滴加速 度太小时，BiOCl 为片状结晶、 粘结在一起，所以 选择 BiCl3滴加速度为3～4mL／min</p><h6 id="反应时间的影响">反应时间的影响</h6><p>晶核生成是瞬间的，而生长却是一个缓慢过 程。 文献［2］报导在 BiOCl 的制备过程中，最初粒 子形状极不规则，而且界面模糊，10min 后初显面目，但比较零乱；到20min 后才比较清楚，呈 四方体；到了30min 以后，粒子形状大小才趋于 稳定。 因此，本研究选择 BiCl3 滴加完了以后，再 反应30min</p><h6 id="综合实验结果">综合实验结果</h6><p>硝酸铋转化水解法制备 BiOCl 的关键因素是稀释水的量、 反应温度和体 系的 pH 值。 在最佳的工艺条件下，制得的 BiOCl 转化率高、 BiONO3 含量少。</p><h6 id="最佳工艺">最佳工艺</h6><p>BiCl3 （0.3675mol／L）与稀释水的比例1∶4，反应温度为90～95℃，体系的 pH 值1～2，稀释水中提前加入盐酸 （1∶1） 的量为 稀释水体系的1.7％～4％，搅拌速度300r／min， BiCl3滴加速度3～4mL／min，反应时间30min， 工艺简单，操作方便，反应条件易于控制</p><h6 id="相关参数计算与核验">相关参数计算与核验</h6><p>硝酸铋 $ Bi(NO_3)_3 $ ：分子量：394.995</p><p>​准确说应该是 $ Bi(NO_3)_3·5H_2O $  分子量：485.07 ； 计算时按照五水硝酸铋计算</p><p>​$ Bi(NO_3)_3＋3NaCl＝BiCl_3＋3NaNO_3 $  ；</p><p>​我准备用盐酸$HCl $ 这个方案来制备氯化铋$ BiCl_3 $ 溶液：</p><p>​$ Bi(NO_3)_3 + 3Hcl = BiCl_3 + 3HNO_3$  ；</p><p>​Note：硝酸铋易水解：$ Bi(NO_3)_3+H_2O==BiONO_3↓+2HNO_3 $ ；</p><p>氯化铋 $ BiCl_3 $  ：</p><p>​分子量：315.34 ， 密度 ： 4.75</p><p>氯氧化铋$ BiOCl $</p><p>​分子量：260.48 ，熔点：218℃ ，密度：7.72g/cm3</p><p>计算目标：</p><p>​现有 ： 硝酸铋 $ Bi(NO_3)_3 $  ， 浓盐酸（质量分数36%） ， 稀盐酸（1：1）；</p><p>​要配置 BiCl3 （0.3675mol／L），也就是$Bi^{3+}$ 浓度为0.3675mol／L ， 100ml ， 需要硝酸铋 $Bi(NO_3)_3·5H_2O$   多少g？</p><p>​计算过程：</p><p>​算个der ，17.8g</p><h4 id="中文专利">中文专利</h4><h3 id="外文文献">外文文献</h3><h4 id="外文论文">外文论文</h4><h4 id="外文专利">外文专利</h4><h3 id="文献综述">文献综述</h3><h4 id="制备方法">制备方法</h4><h4 id="原理与过程">原理与过程</h4><h3 id="随笔：">随笔：</h3><h4 id="13">13</h4><p>400ml水，加10ml稀盐酸</p><p>17.8g硝酸铋，加12.67ml盐酸 溶解</p><p>盐酸用量根据稀释定律计算 cv=cv那个</p><p>一次过滤，发现出现白色沉淀，说明转换率还是不够，相当部分的bi离子没有反应完全</p><p>这个问题很大，后期生产会很浪费，需要琢磨一个回收机制</p><p>这里面的硝酸氧铋十分的讨厌，这玩意没控制好 ， 一锅就全成白色的了。。。。</p><p>120度半小时，成土黄色了。</p><h4 id="14">14</h4><p>第二次，同样的路线，活性剂3ml，中途加入</p><p>但是加料流量低于3，好像感觉不行</p><p>60度烘干一小时，第二天再加两小时</p><p>银白色</p><p>晶粒大部分很粗，反应时间有关</p><p>加氯化钠三勺</p><h4 id="15">15</h4><p>500ml水， 17g硝酸铋，95度，8.5稀盐酸，14ml浓盐酸，300rpm</p><p>0.8g的T80。 bi溶液50ml+水到100ml左右，因为浓度计算按100ml算的。</p><p>酸化水ph1.5，溶液ph0.5 ， 好家伙</p><h4 id="16">16</h4><p>500ml水， 17g硝酸铋，95度，8.5稀盐酸，13ml浓盐酸，300rpm</p><p>0.8g的T80。 bi溶液50ml+水到100ml左右</p><p>酸化水ph1.5，溶液ph0.5</p><p>3ml半小时，3.5半小时，4直至全部加完（大部分都是3.5加入的）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chemical </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interesting chemistry experiment - Fluorescence of bis-oxalate</title>
      <link href="/2022/07/10/%E5%A5%87%E5%A6%99%E5%8C%96%E5%AD%A6/Interesting-chemistry-experiment-Fluorescence-of-bis-oxalate/"/>
      <url>/2022/07/10/%E5%A5%87%E5%A6%99%E5%8C%96%E5%AD%A6/Interesting-chemistry-experiment-Fluorescence-of-bis-oxalate/</url>
      
        <content type="html"><![CDATA[<h1>教你制作一根荧光棒！</h1><h2 id="实验步骤：">实验步骤：</h2><p>1、小玻璃瓶一个</p><p>​加入 荧光颜料：双苯基蒽</p><p>​一丢丢，就是字面意思</p><p><img src="/../img/image-20220710131106094.png" alt="image-20220710131106094"></p><p>​Note：不同染料，色儿不同~ 罗丹明B为橘红色。。。</p><p>2、再加入，双草酸酯（CPPO是一类化学物质）</p><p>​质量： 1g</p><p><img src="/../img/cdbf6c81800a19d869ad67c832fa828ba71e4655" alt="img"></p><p>​Note：双（2,4,5，三氯水杨酸正戊酯）草酸酯，双（2，4，5三氯水杨酸异戊酯）草酸酯，双（2，4，5三氯水杨酸正丁酯）草酸酯 等物质的简称。</p><p>​Note：实验用的CPPO可以选择自制也可以选择网上购买，不过两个方法成本都高，荧光剂的选择还是罗丹明B比较便宜，双苯蒽可以自制也可以购买</p><p>3、加入 乙酸乙酯 EA（一种溶剂），震荡使溶解。</p><p>​加量大概到半瓶就行。。。吧</p><p><img src="/../img/image-20220710131357008.png" alt="image-20220710131357008"></p><p>​Note：此溶剂对实验影响：大约四小时后熄灭。</p><p>4、上一步很重要，一定要先溶解完全</p><p>5、加入过氧化氢（30%双氧水）</p><p><img src="/../img/image-20220710131742275.png" alt="image-20220710131742275"></p><p>​Note： 过氧化氢喝乙酸乙酯 体积比 1：1 ，就按各10ml吧~</p><p>6、乙酸钠 （或者 水杨酸钠）</p><p>​质量：0.3g</p><p>​这玩意是催化剂~</p><p><img src="/../img/image-20220710132037177.png" alt="image-20220710132037177"></p><p>​看看，效果立马来了</p><p>7、封盖，晃悠~</p><p><img src="/../img/image-20220710132124398.png" alt="image-20220710132124398"></p><p>​Note：这个蓝色，是颜料的色，可以自己换。</p><h2 id="Note：-2">Note：</h2><p>一些试剂需要去西安的化工店去买。。。网购不一定搞得到</p><h2 id="总结：">总结：</h2><p>拉倒吧~</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chemical </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Interesting chemical experiment - methylene blue changes color</title>
      <link href="/2022/07/10/%E5%A5%87%E5%A6%99%E5%8C%96%E5%AD%A6/Interesting-chemical-experiment-methylene-blue-changes-color/"/>
      <url>/2022/07/10/%E5%A5%87%E5%A6%99%E5%8C%96%E5%AD%A6/Interesting-chemical-experiment-methylene-blue-changes-color/</url>
      
        <content type="html"><![CDATA[<h1>摇一摇就会变色的瓶子</h1><h2 id="实验方法：">实验方法：</h2><p>1、250ml容器内 加入 2g氢氧化钠 ，并加少量水溶解。</p><p><img src="/../img/image-20220710121057631.png" alt="image-20220710121057631" style="zoom:50%;"><img src="/../img/image-20220710121152071.png" alt="image-20220710121152071" style="zoom:50%;"></p><p>Note：碱用量越大，褪色过程越快。</p><p>2、再加入2g葡萄糖。并加少量水溶解。</p><img src="/../img/image-20220710121246451.png" alt="image-20220710121246451" style="zoom:67%;"><p>3、微量的 亚甲基蓝粉末。并加少量水溶解。（当作氧化还原指示剂用，过多影响变色敏感度）</p><p><img src="/../img/image-20220710121336521.png" alt="image-20220710121336521" style="zoom:50%;"><img src="/../img/image-20220710121410179.png" alt="image-20220710121410179"></p><p>4、充分震荡，溶液变蓝。</p><p><img src="/../img/image-20220710121450472.png" alt="image-20220710121450472"></p><p><img src="/../img/image-20220710121702017.png" alt="image-20220710121702017"></p><p>5、加点酚酞：</p><img src="/../img/image-20220710125646535.png" alt="image-20220710125646535" style="zoom:67%;"><img src="/../img/image-20220710125704286.png" alt="image-20220710125704286" style="zoom:67%;"><h2 id="实验原理：">实验原理：</h2><p>亚甲基蓝（蓝色）在碱性条件下被葡萄糖还原为还原态亚甲基蓝（无色），在振荡时氧气又将还原态亚甲基蓝氧化为亚甲基蓝。</p><p><img src="/../img/image-20220710122947812.png" alt="image-20220710122947812"></p><p>碱性条件下，葡萄糖构型由半缩醛变为开链醛，具备还原性。然后去还原亚甲基蓝。葡萄糖自身被氧化称葡萄糖酸。又因为碱性环境，生成葡萄糖酸钠。</p><p><img src="/../img/image-20220710123201050.png" alt="image-20220710123201050"></p><h2 id="Note：">Note：</h2><p>亚甲基蓝作为氧化还原指示剂不应加入过多，适当增大碱的用量可以缩短褪色周期，但也不能加入过多，否则会加快葡萄糖的失效。</p><p>变色反应的最佳温度是25℃，冬天可以略微加热。</p><p>加入其他染色剂可以改变氧化态和还原态呈现的颜色。</p><p><img src="/../img/image-20220710125553424.png" alt="image-20220710125553424"></p><p>实验中葡萄糖会被消耗，若振荡次数过多或溶液放置时间过长都将使溶液失效，溶液就会呈现亮黄色。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Chemical </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Information on the preparation of bismuth oxychloride crystals</title>
      <link href="/2022/07/10/%E5%A5%87%E5%A6%99%E5%8C%96%E5%AD%A6/Information-on-the-preparation-of-bismuth-oxychloride-crystals/"/>
      <url>/2022/07/10/%E5%A5%87%E5%A6%99%E5%8C%96%E5%AD%A6/Information-on-the-preparation-of-bismuth-oxychloride-crystals/</url>
      
        <content type="html"><![CDATA[<h1>Bismuth Oxychloride</h1><p>note： 这类文章，标签里要插一句：mathjax: true</p><h2 id="Biocl">Biocl:</h2><p>$$<br>cl[Bi]=O;<br>O=Bi-cl<br>$$</p><p>密度：$ ρ=7.36-7.78 g/cm^3 $</p><p>晶相结构：四方晶系 / tp6</p><p>分子量：259.944153 / 260.43</p><p>别称： 氧氯化铋，碱性铋盐</p><h2 id="Surfactant：">Surfactant：</h2><h3 id="op乳化剂">op乳化剂</h3><h3 id="吐温乳化剂">吐温乳化剂</h3><h3 id="油胺">油胺</h3><h3 id="脂肪醇聚氧乙烯醚类">脂肪醇聚氧乙烯醚类</h3><h3 id="司盘类">司盘类</h3><h3 id="聚乙二醇">聚乙二醇</h3><h3 id="油酸">油酸</h3><h3 id="聚乙烯醇">聚乙烯醇</h3><h2 id="Preparation-method：">Preparation method：</h2><h3 id="Reaction-conditions：">Reaction conditions：</h3><h4 id="PH：">PH：</h4><p>涉及：</p><p>Bi（Ⅲ）Biocl的沉降PH范围</p><p>经验参数控制在PH=3.2-3.5，开始沉降</p><h4 id="related-ions：">related ions：</h4><p>bi（3+） ； cl（1-）；no3（1-）；h（1+）</p><h4 id="reaction-temperature：">reaction temperature：</h4><p>60-85℃</p><h4 id="reaction-time：">reaction time：</h4><p>10-20小时</p><h4 id="Specific-operation-process：">Specific operation process：</h4>]]></content>
      
      
      
        <tags>
            
            <tag> Chemical </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客部署到腾讯云服务器(使用宝塔面板)</title>
      <link href="/2022/07/03/hexo/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-%E4%BD%BF%E7%94%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/"/>
      <url>/2022/07/03/hexo/Hexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8-%E4%BD%BF%E7%94%A8%E5%AE%9D%E5%A1%94%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p><strong>使用宝塔面板的好处：</strong></p><ul><li><strong>操作更方便，习惯了Windows或者对Linux不熟悉的朋友可以更方便</strong></li><li><strong>添加证书更加方便，而且可以开启HTTPS</strong></li></ul><p><strong>我的服务器：</strong></p><ul><li>系统 <code>宝塔Linux面板 7.9.2 腾讯云专享版</code></li><li>配置 <code>通用型/2核/2GB/4Mbps</code></li></ul><p><strong>服务器需要的环境</strong></p><ul><li>环境：<code>git</code>，<code>Nginx</code>，<code>宝塔Linux</code></li><li>使用<code>git</code> 自动化部署发布</li></ul><p>打开腾讯云，进入【云服务器】→【登录】</p><p><img src="https://pic4.zhimg.com/80/v2-e5ffd3d52a831fe8033d2134d841e55b_720w.jpg" alt="img"></p><blockquote><p>初始密码在右上角消息里面有</p></blockquote><h2 id="1】Git安装及配置">1】Git安装及配置</h2><h3 id="一、安装依赖库和编译工具">一、安装依赖库和编译工具</h3><ul><li>安装依赖库：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br></pre></td></tr></table></figure><p>然后会出现：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Is this ok [y/d/N]:</span><br></pre></td></tr></table></figure><p>输入<code>y</code>继续安装，后面也一样。</p><ul><li>安装编译工具：</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash yum install gcc perl-ExtUtils-MakeMaker package</span><br></pre></td></tr></table></figure><h3 id="二、下载-git并解压编译安装">二、下载 git并解压编译安装</h3><ul><li>查看服务器已有的git版本</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>然后会看到：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git version 1.8.3.1</span><br></pre></td></tr></table></figure><blockquote><p>但是官网版本已经更新了，因为yum仓库的Git版本更新的时间会存在延时，我们这里采用源码包安装方式安装。</p></blockquote><ul><li>将陈旧版本的git删除</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure><ul><li>选择一个目录来存放下载下来的 git 安装包。这里选择了<code>/usr/local/src</code> 目录</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash cd /usr/local/src</span><br></pre></td></tr></table></figure><ul><li>下载最新版git到<code>/usr/local/src</code>，可以在官网找到版本，目前最新版本是2.26.0。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://ftp.ntu.edu.tw/software/scm/git/git-2.26.0.tar.gz</span><br></pre></td></tr></table></figure><ul><li>解压到当前目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar -zvxf git-2.26.0.tar.gz</span><br></pre></td></tr></table></figure><ul><li>进入 <code>git-2.26.0.tar.gz</code> 目录下</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> git-2.26.0</span><br></pre></td></tr></table></figure><ul><li>执行编译</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make prefix=/usr/local/git all</span><br></pre></td></tr></table></figure><ul><li>安装 git 到 /usr/local/git 目录下</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make prefix=/usr/local/git install</span><br></pre></td></tr></table></figure><h3 id="三、配置-git-环境变量">三、配置 git 环境变量</h3><ul><li>打开环境变量配置文件</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p><strong>按i进入编辑模式，按向下键到底部，添加下面两行命令：</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:/usr/local/git/bin   <span class="comment"># git 的目录</span></span><br><span class="line"><span class="built_in">export</span> PATH</span><br></pre></td></tr></table></figure><p><strong>按<code>esc</code>退出，按<code>:wq</code>保存编辑。(注意是先<code>:</code>再是<code>wq</code>)</strong></p><p><img src="https://pic1.zhimg.com/80/v2-b7b39976fb970f12779208d4e183d398_720w.jpg" alt="img"></p><ul><li>使 git 环境变量生效</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><ul><li>验证安装完成，查看 git 的版本号</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><p>这时候我们的git版本已经变成了：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git version 2.26.0</span><br></pre></td></tr></table></figure><p><img src="https://pic4.zhimg.com/80/v2-7f7e449da983aa95440085ee9b365cbf_720w.jpg" alt="img"></p><h3 id="四、创建-git-用户">四、创建 git 用户</h3><ul><li>创建git用户</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">adduser git</span><br></pre></td></tr></table></figure><ul><li>获取权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>按 <code>i</code> 键进入文件的编辑模式，按向下键找到如下字段</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root    ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p>在其后面增加一句：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git     ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p><strong>按 <code>Esc</code> 键退出编辑模式，输入<code>:wq</code> 保存退出。（先输入<code>:</code>，然后输入<code>wq</code>回车）</strong></p><ul><li>退回权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 /etc/sudoers</span><br></pre></td></tr></table></figure><h3 id="五、配置密钥">五、配置密钥</h3><ul><li>创建密钥</li></ul><p>来到这里的小伙伴应该都已经有了自己的hexo博客，那么肯定已经创建过自己的密钥，一般存放在<code>c/用户/.ssh</code>下。</p><p><img src="https://pic3.zhimg.com/80/v2-84cf4e4e3f6304e272133ee33d3e56fe_720w.jpg" alt="img"></p><p>如果没有自己的密钥，可以移步我之前的教程，里面有密钥创建步骤</p><p><a href="https://link.zhihu.com/?target=https%3A//www.muyiio.com/2020/02/18/1/">Github + Hexo 搭建个人博客超详细教程</a></p><ul><li>将密钥保存在服务器(之前有密钥的直接复制就可以)</li></ul><p>将<code>id_rsa.pub</code>里面的密钥复制,在服务器运行下面命令，创建.ssh文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su git</span><br><span class="line"><span class="built_in">mkdir</span> ~/.ssh</span><br></pre></td></tr></table></figure><p>创建<code>.ssh/authorized_keys</code>文件，打开<code>authorized_keys</code>文件并将刚才在本地机器复制的内容拷贝其中并保存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p><strong>按<code>i</code>进入编辑模式粘贴完按 <code>Esc</code> 键退出编辑模式，输入<code>:wq</code> 保存退出。（先输入<code>:</code>，然后输入<code>wq</code>回车）</strong></p><ul><li>修改权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 755 ~</span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><ul><li>测试本地连接服务器</li></ul><p>在本地电脑git bash here</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//yourIp为远程服务器的ip地址</span><br><span class="line">ssh -v git@yourIp     //yourIp为你的服务器ip</span><br></pre></td></tr></table></figure><p>如图则证明本地机器与远程机器已经接通</p><p><img src="https://pic4.zhimg.com/80/v2-44add4f8630a0765a426c5956c82f1b3_720w.jpg" alt="img"></p><h3 id="六、创建git仓库">六、创建git仓库</h3><ul><li>切换到root用户，创建一个目录用于存储网站的根目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><ul><li>创建网站的根目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /home/hexo</span><br></pre></td></tr></table></figure><ul><li>给予权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> git:git -R /home/hexo</span><br></pre></td></tr></table></figure><h3 id="七、自动化部署">七、自动化部署</h3><ul><li>获取root权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure><ul><li>建立git仓库</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git</span><br><span class="line">git init --bare blog.git</span><br></pre></td></tr></table></figure><ul><li>修改blog.git权限</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> git:git -R blog.git</span><br></pre></td></tr></table></figure><ul><li>在 <code>/home/hexo/blog.git</code> 下，有一个自动生成的 <code>hooks</code> 文件夹，我们创建一个新的 <code>git</code> 钩子 <code>post-receive</code>，用于自动部署。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><ul><li><strong>按 <code>i</code> 键进入文件的编辑模式</strong>，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"> git --work-tree=/home/hexo --git-dir=/home/git/blog.git checkout -f</span><br></pre></td></tr></table></figure><p><strong>按 <code>Esc</code> 键退出编辑模式，输入<code>:wq</code> 保存退出。（先输入<code>：</code>，然后输入<code>wq</code>回车）</strong></p><p><img src="https://pic2.zhimg.com/80/v2-b7d46437ae28cb6d13712accaf0b81f5_720w.jpg" alt="img"></p><ul><li>修改文件权限，使得其可执行。</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /home/git/blog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><h2 id="2】安装宝塔">2】安装宝塔</h2><blockquote><p>宝塔Linux面板是提升运维效率的服务器管理软件，支持一键LAMP/LNMP/集群/监控/网站/FTP/数据库/JAVA等100多项服务器管理功能。支持的操作系统有CentOS，Ubuntu、Debian、Fedora.</p></blockquote><p><img src="https://pic2.zhimg.com/80/v2-da314cc6727ff0a8d316ee52939e1d31_720w.jpg" alt="img"></p><ul><li>首先切换到根目录</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br></pre></td></tr></table></figure><ul><li><strong>安装6.9稳定版（宝塔linux6.x版本基于centos7开发，适用于centos7.x版本）</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p><strong>中间会让你输入<code>y/n</code>继续安装，输入<code>y</code></strong></p><ul><li><strong>7.x版本以下安装宝塔5.9</strong></li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><h2 id="3】登录宝塔面板">3】登录宝塔面板</h2><ul><li><strong>宝塔安装完成后会出现以下字样</strong></li></ul><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">================================================================</span><br><span class="line"></span><br><span class="line">BT-<span class="attribute">Panel</span> default <span class="literal">info</span>!</span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">Bt-Panel-URL: http://119.34.25.52:8888/af293c8c</span><br><span class="line">username: aaaaaaaaa</span><br><span class="line">password: <span class="number">123456789</span></span><br><span class="line">Warning:</span><br><span class="line">If you cannot access the panel, </span><br><span class="line"></span><br><span class="line">release the following port (<span class="number">8888</span>|<span class="number">888</span>|<span class="number">80</span>|<span class="number">443</span>|<span class="number">20</span>|<span class="number">21</span>) in the security group</span><br><span class="line">==================================================================</span><br></pre></td></tr></table></figure><p><strong>注明：</strong></p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">Bt-Panel-URL: http://119.34.25.52:8888/<span class="attribute">af293c8c</span>       <span class="comment">#登录宝塔面板的地址</span></span><br><span class="line">username: aaaaaaaaa                                   <span class="comment">#账号</span></span><br><span class="line">password: <span class="number">123456789</span>                                   <span class="comment">#密码</span></span><br></pre></td></tr></table></figure><p>然后我们来到浏览器输入URL进入宝塔面板，再输入账号密码登录。</p><ul><li><strong>不知道账号密码以及登录地址在服务器输入下面命令即可</strong></li></ul><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">/etc/init.d/<span class="attribute">bt</span> default</span><br></pre></td></tr></table></figure><ul><li><strong>安装LNMP（推荐）</strong></li></ul><p><img src="https://pic3.zhimg.com/80/v2-30bc2977e2ca834e4269a1f5aa0c17a6_720w.jpg" alt="img"></p><p>等待安装完成。</p><h2 id="4】添加网站">4】添加网站</h2><ul><li><strong>点击【网站】→【添加站点】</strong></li></ul><p><img src="https://pic2.zhimg.com/80/v2-cc75fb2e340bafafa55e90dd92ba0935_720w.jpg" alt="img"></p><ul><li><strong>添加密钥和证书并强制Https</strong></li></ul><blockquote><p><strong>如果没有申请证书就去域名注册商处免费申请一个，这里我以腾讯云为例</strong></p></blockquote><p>1.首先下载证书：</p><p><img src="https://pic1.zhimg.com/80/v2-801a2fcdff726c73eb24eb0ffbbf3674_720w.jpg" alt="img"></p><p>2.在本地解压打开，我们可以看到证书目录文件：</p><p><img src="https://pic4.zhimg.com/80/v2-685ae67a491ded22acc94c1705335537_720w.jpg" alt="img"></p><p>3.宝塔面板只需要用到<code>Nginx</code>或<code>Apache</code>的，其他无需理会。</p><p><strong>①使用Nginx:</strong></p><p><img src="https://pic3.zhimg.com/80/v2-91c78434791ae612c4bac155cc817af6_720w.jpg" alt="img"></p><p>其中<code>.key</code>后缀的是服务器私钥，填入面板证书的左边框中（用文本编辑器完整复制粘贴进去）</p><p><code>.crt</code>后缀的是证书（也可能是pem后缀），填入面板证书的右边框中（用文本编辑器完整复制粘贴进去）</p><p><strong>②使用Apache:</strong></p><p><img src="https://pic4.zhimg.com/80/v2-6f12dd5da90d75fbc28a786d3744c04b_720w.jpg" alt="img"></p><p>其中<code>.key</code>后缀的是服务器私钥，填入面板证书的左边框中（用文本编辑器完整复制粘贴进去）</p><p>1、2两张证书则需要合并填入面板证书的右边蓝框中（用文本编辑器完整复制粘贴进去）</p><p><strong>若不合并只填蓝框域名证书手机访问就会报缺失证书链/不安全等同时</strong></p><p><strong>若顺序不正确会导致apache无法正常启动</strong></p><p>4.证书添加成功后在右上角强制Https</p><p><img src="https://pic1.zhimg.com/80/v2-ea7612c59f1aa3f25bcffcc22f4d400c_720w.jpg" alt="img"></p><h2 id="5】配置本地Hexo">5】配置本地Hexo</h2><ul><li>博客根目录_config下增加</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: root@***(服务器ip,内网外网都行):/home/git/blog.git    #仓库地址</span><br><span class="line">    branch: master    #分支</span><br></pre></td></tr></table></figure><ul><li>部署</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><ul><li>输入<code>hexo d</code>的时候，会要求你输入自己的服务器密码</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;https://e.coding.net/godxiaolon/godxiaolon.git&#x27;.</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line">root@119.25.56.82&#x27;s password:</span><br><span class="line">Enumerating objects: 182, done.</span><br><span class="line">Counting objects: 100% (182/182), done.</span><br><span class="line">Delta compression using up to 12 threads</span><br><span class="line">Compressing objects: 100% (61/61), done.</span><br><span class="line">Writing objects: 100% (95/95), 73.08 KiB | 3.18 MiB/s, done.</span><br><span class="line">Total 95 (delta 45), reused 0 (delta 0)</span><br><span class="line">remote: hooks/post-receive: line 1: t: command not found</span><br><span class="line">To 118.25.27.52:/home/git/hexoBlog.git</span><br><span class="line">   8df3691..7d63b39  HEAD -&gt; master</span><br><span class="line">Branch &#x27;master&#x27; set up to track remote branch &#x27;master&#x27; from &#x27;root@118.25.27.52:/home/git/hexoBlog.git&#x27;.</span><br><span class="line">INFO  Deploy done: git</span><br></pre></td></tr></table></figure><blockquote><p>输入密码不会有显示，输完回车就可以</p></blockquote><ul><li><strong>如果出现<code>bash: git-receive-pack: command not found</code>,则运行：</strong></li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/git/bin/git-receive-pack  /usr/bin/git-receive-pack</span><br></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-f835fd310b1b361a250ba7a46a96e63e_720w.jpg" alt="img"></p><ul><li>访问服务器ip，看看有没有成功</li></ul><p><img src="https://pic4.zhimg.com/80/v2-76bf143b2dd7ec1769fe3f62265cccc7_720w.jpg" alt="img"></p><p><strong>可以看到，使用宝塔面板部署了证书，浏览器标识为安全。</strong></p><h2 id="6】总结">6】总结</h2><p>宝塔的实用性挺广的，喜欢的小伙伴们可以去探索~</p><p><strong>教程有不对的地方欢迎指正~</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔后面板地址无法访问</title>
      <link href="/2022/06/26/hexo/%E8%A7%A3%E5%86%B3Centos%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E5%90%8E%E9%9D%A2%E6%9D%BF%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/"/>
      <url>/2022/06/26/hexo/%E8%A7%A3%E5%86%B3Centos%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E5%90%8E%E9%9D%A2%E6%9D%BF%E5%9C%B0%E5%9D%80%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1>解决Centos安装宝塔后面板地址无法访问</h1><p>腾讯云 轻量应用服务器 为例子</p><p>腾讯云需手动配置防火墙 8888端口，否则无法访问</p><p><img src="https://img-blog.csdnimg.cn/20210313111506294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NjA0MDkwMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试验区</title>
      <link href="/2022/06/24/%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/"/>
      <url>/2022/06/24/%E4%BB%A3%E7%A0%81%E6%BC%94%E7%A4%BA/%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1>这是一篇小白鼠博文-专门用来测试奇奇怪怪得功能</h1><h2 id="上面这行是废话">上面这行是废话</h2><h3 id="上面的也是废话">上面的也是废话</h3><h4 id="俺也一样">俺也一样</h4><h5 id="end">end</h5><h2 id="唠叨一句">唠叨一句</h2><h3 id="这篇文章能置顶，因为文件标签里多了一行这个玩意-：-sticky-1">这篇文章能置顶，因为文件标签里多了一行这个玩意 ： sticky: 1</h3><p>英语渣渣翻译就是 sticky 顽固的.</p><h3 id="自定义域名尾巴">自定义域名尾巴:</h3><p>文章 front部分，添加自定义 abbrlink 即可。</p><h3 id="小小一篇博文，承载了搭建博客的全部操作试验，哈哈哈哈哈">小小一篇博文，承载了搭建博客的全部操作试验，哈哈哈哈哈</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====================== 初始化成功 =======================&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">22</span>+<span class="string">&#x27;爬取树脂相关信息&#x27;</span>+<span class="string">&#x27;*&#x27;</span>*<span class="number">23</span>)</span><br><span class="line">    <span class="comment"># names ： //div[@class=&quot;sslb&quot;]/ul/li/p/a/@title</span></span><br><span class="line">    <span class="comment"># contents ：//div[@class=&quot;sslb&quot;]/ul/li/p/a</span></span><br><span class="line">    li_list = response.xpath(<span class="string">&#x27;//div[@class=&quot;sslb&quot;]/ul/li&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">        <span class="built_in">print</span>(li)</span><br><span class="line">        names = li.xpath(<span class="string">&#x27;./p/a/@title&#x27;</span>).extract_first()</span><br><span class="line">        contents = li.xpath(<span class="string">&#x27;./p/a&#x27;</span>).extract_first()</span><br><span class="line">        hrefs = li.xpath(<span class="string">&#x27;./p/a/@href&#x27;</span>).extract_first()</span><br><span class="line">        <span class="built_in">print</span>(names, contents, hrefs)</span><br><span class="line">        sku = KyhgItem(names=names, contents=contents, hrefs=hrefs)</span><br><span class="line">        <span class="keyword">yield</span> sku</span><br><span class="line">    <span class="keyword">if</span> self.page &lt; <span class="number">100</span>:</span><br><span class="line">        self.page = self.page + <span class="number">1</span></span><br><span class="line">        url = self.base_url + \</span><br><span class="line">            <span class="built_in">str</span>(self.page) + \</span><br><span class="line">            <span class="string">&#x27;&amp;mid=3&amp;keyword=%E4%B8%99%E7%83%AF%E9%85%B8%E6%A0%91%E8%84%82&#x27;</span></span><br><span class="line">        <span class="keyword">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><img src="https://images.pexels.com/photos/574070/pexels-photo-574070.jpeg?auto=compress&amp;cs=tinysrgb&amp;w=1260&amp;h=750&amp;dpr=1" alt="这里是图片名称"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo发生error spawn failed错误的解决方法</title>
      <link href="/2022/06/22/hexo/hexo%E5%8F%91%E7%94%9Ferror%EF%BC%9Aspawn-failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2022/06/22/hexo/hexo%E5%8F%91%E7%94%9Ferror%EF%BC%9Aspawn-failed%E9%94%99%E8%AF%AF%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1>项目场景：<a href="https://so.csdn.net/so/search?q=hexo&amp;spm=1001.2101.3001.7020">hexo</a>发生error：spawn failed错误的解决方法</h1><hr><h1>问题描述</h1><p>先是出现错误：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error：spawn failed...</span><br></pre></td></tr></table></figure><p>然后经过一些博客的操作会出现以下问题：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fatal: cannot lock ref <span class="string">&#x27;HEAD&#x27;</span>: unable to resolve reference HEAD: Invalid argument error: src refspec</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">error: src refspec HEAD does not match any.</span><br></pre></td></tr></table></figure><p>下面图片是我自己<code>hexo d</code>上传<a href="https://so.csdn.net/so/search?q=GitHub&amp;spm=1001.2101.3001.7020">GitHub</a>以后出现的报错：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\Program Files\blog\node_modules\hexo-util\lib\spawn.js:<span class="number">51</span>:<span class="number">21</span>)</span><br><span class="line">      at ChildProcess.emit (node:events:<span class="number">526</span>:<span class="number">28</span>)</span><br><span class="line">      at ChildProcess.cp.emit (D:\Program Files\blog\node_modules\cross-spawn\lib\enoent.js:<span class="number">34</span>:<span class="number">29</span>)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:<span class="number">291</span>:<span class="number">12</span>) &#123;</span><br><span class="line">    code: <span class="number">128</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="number">&#x27;</span>s wrong. Maybe you can find the solution here: %s https:<span class="comment">//hexo.io/docs/troubleshooting.html</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>原因分析：</h1><blockquote><p>问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。</p></blockquote><hr><h1>解决方案：</h1><h2 id="解决方法：一">解决方法：一</h2><p>1.删除 <code>.deploy_git</code> 文件夹;<br>2.输入 <code>git config --global core.autocrlf false</code><br>3.然后，依次执行：</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">hexo clean</span></span><br><span class="line"><span class="language-xml">hexo g</span></span><br><span class="line"><span class="language-xml">hexo d</span></span><br></pre></td></tr></table></figure><h2 id="解决方法-：二">解决方法 ：二</h2><p>1.进入hexo根目录<br>2.直接把箭头指向的<code>.deploy_git</code>和<code>public</code>直接删除！<br><img src="https://img-blog.csdnimg.cn/ffa9155ebfc543d48ef7eb909b6b4716.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bq45oqx,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"><br>3.然后，依次执行：</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">hexo clean</span></span><br><span class="line"><span class="language-xml">hexo g</span></span><br><span class="line"><span class="language-xml">hexo d</span></span><br></pre></td></tr></table></figure><h2 id="注意！！：删除这两个文件夹不会造成影响！执行完hexo三连会重新部署-简单暴力！">注意！！：删除这两个文件夹不会造成影响！执行完hexo三连会重新部署 简单暴力！</h2>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站PV、UV的含义</title>
      <link href="/2022/06/22/hexo/%E7%BD%91%E7%AB%99PV%E3%80%81UV%E7%9A%84%E5%90%AB%E4%B9%89/"/>
      <url>/2022/06/22/hexo/%E7%BD%91%E7%AB%99PV%E3%80%81UV%E7%9A%84%E5%90%AB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<h1>网站PV，UV含义</h1><p><img src="/../../img/photo-1507297230445-ff678f10b524" alt="man holding tablet computer"></p><h2 id="1、PV：PageView">1、PV：PageView</h2><p>具体是指的是网站的浏览量或者点击量，衡量网站用户访问的网页数量；在一定统计周期内用户每打开或刷新一个页面就记录1次，多次打开或刷新同一页面则浏览量累计。</p><h2 id="1-5、PV的计算：">1.5、PV的计算：</h2><p>当一个访问者访问网站的时候，记录他所访问的页面和对应的IP，如果到了一个时间点IP数是30万的话，平均每个访问者访问了3个页面，那么PV表的记录就要90万。</p><h2 id="2、UV：Unique-Visitor">2、UV：<a href="https://so.csdn.net/so/search?q=Unique&amp;spm=1001.2101.3001.7020">Unique</a> Visitor</h2><p>独立访客，统计1天内访问某站点的用户数(以cookie为依据);访问网站的一台电脑客户端为一个访客。可以理解成访问某网站的电脑的数量。网站判断来访电脑的身份是通过来访电脑的cookies实现的。如果更换了IP后但不清除cookies，再访问相同网站，该网站的统计中UV数是不变的。如果用户不保存cookies访问、清除了cookies或者更换设备访问，计数会加1。00:00-24:00内相同的客户端多次访问只计为1个访客。</p><h2 id="3-什么是PR值"><strong>3.什么是PR值</strong></h2><p>PR值，即PageRank，网页的级别技术。取自Google的创始人Larry Page，它是Google排名运算法则(排名公式)的一部分，用来标识网页的等级/重要性。级别从1到10级，10级为满分。PR值越高说明该网页越受欢迎(越重要)。</p><p>例如:一个PR值为1的网站表明这个网站不太具有流行度，而PR值为7到10则表明这个网站非常受欢迎(或者说极其重要)。</p><p>我们可以这样说:一个网站的外部链接数越多其PR值就越高;外部链接站点的级别越高(假如Macromedia的网站链到你的网站上)，网站的PR值就越高。例如:如果ABC.COM网站上有一个XYZ.COM网站的链接，那为ABC.COM网站必须提供一些较好的网站内容，从而Google会把来自XYZ.COM的链接作为它对ABC.COM网站投的一票。</p><p>你可以下载和安装Google工具条来检查你的网站级别(PR值)。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 知识点解读 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇hexo文章</title>
      <link href="/2022/06/21/hexo/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E6%96%87%E7%AB%A0/"/>
      <url>/2022/06/21/hexo/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章：Hello-Hexo">第一章：Hello Hexo</h2><h2 id="第二章：相关指令">第二章：相关指令</h2><h3 id="npm指向淘宝源安装cnpm">npm指向淘宝源安装cnpm</h3><h3 id="npm排错">npm排错</h3><p>npm.ini 改一个参数</p><h3 id="cnpm安装hexo">cnpm安装hexo</h3><p>cnpm install -g hexo-cli      其中 -g全局安装</p><p>安装地址在：C:\Users\asusf\AppData\Roaming\npm\node_modules\hexo-cli</p><p>新建一个文件：mkdir fggblog</p><p>进入：cd fggblog</p><p>初始化：hexo init</p><p>查看文件列表：dir</p><p>启动博客：hexo s</p><p>本地地址：<a href="http://localhost:4000/">http://localhost:4000/</a></p><p>断开：Ctrl+c</p><p>博客内容路径：fggblog\source\_posts</p><p>创建博客：hexo n “我的第一篇hexo文章”</p><p>路径返回：cd …/… 返回两层的意思</p><p>清理： hexo clean</p><p>生成： hexo g</p><h2 id="第三章：备用记录">第三章：备用记录</h2><p>vim安装： npm i vim -g</p><h3 id="远端部署">远端部署</h3><p>github新建仓库</p><p>仓库名称为 <a href="http://asusfgg.github.io">asusfgg.github.io</a> 固定格式</p><p>在C:\Users\asusf\AppData\Roaming\npm\node_modules\hexo-cli\fggblog目录下安装&gt;cnpm install --save hexo-deployer-git</p><p>配置文件_config.yml</p><p>文件尾部 修改：</p><p>`# Deployment</p><p>## Docs: <a href="https://hexo.io/docs/one-command-deployment">https://hexo.io/docs/one-command-deployment</a></p><p>deploy:</p><p>type: ‘git’</p><p>repo: ‘<a href="https://github.com/asusfgg/asusfgg.github.io.git">https://github.com/asusfgg/asusfgg.github.io.git</a>’</p><p>branch: ‘master’`</p><p>推送带远端：hexo d</p><h3 id="换主题">换主题</h3><p>note:一直是基于fggblog目录操作的</p><h4 id="安装-2">安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure><p>当然，也可以手撸：</p><p>git clone <a href="https://github.com/litten/hexo-theme-yilia.git">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia themes/yilia 后面这句themes/yilia 意思是往这个路径下塞。</p><h4 id="配置">配置</h4><p>修改hexo根目录下的 <code>_config.yml</code> ： <code>theme: yilia</code></p><h3 id="重新推送">重新推送</h3><p>先清理 hexo clean</p><p>在生成 hexo g</p><p>注意！</p><p>要本地启动一下</p><p>hexo s</p><p>然后再推送远端 hexo d</p><h2 id="结语">结语</h2>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>王德峰教授《中西方文化差异的渊源》（一）</title>
      <link href="/2021/06/26/%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94/%E7%8E%8B%E5%BE%B7%E5%B3%B0%E6%95%99%E6%8E%88%E3%80%8A%E4%B8%AD%E8%A5%BF%E6%96%B9%E6%96%87%E5%8C%96%E5%B7%AE%E5%BC%82%E7%9A%84%E6%B8%8A%E6%BA%90%E3%80%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/06/26/%E6%97%A5%E5%B8%B8%E9%9A%8F%E7%AC%94/%E7%8E%8B%E5%BE%B7%E5%B3%B0%E6%95%99%E6%8E%88%E3%80%8A%E4%B8%AD%E8%A5%BF%E6%96%B9%E6%96%87%E5%8C%96%E5%B7%AE%E5%BC%82%E7%9A%84%E6%B8%8A%E6%BA%90%E3%80%8B%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1>王德峰教授《中西方文化差异的渊源》（一）</h1><h2 id="我们是“被迫现代化”的国家">我们是“被迫现代化”的国家</h2><p>现代化的首要目标就是工业化</p><p>那么工业化的前提</p><p>就是必须引入市场原则</p><p>引入这个资本的逻辑</p><p>尽管我们有过一段不短的时期</p><p>就是毛时代</p><p>搞社会主义计划经济体制</p><p>但是这一个时代</p><p>仍然属于资本的时代</p><p>是没有资本家的资本社会</p><p>为什么这么说？</p><p>我们仍然在计划经济时代搞商品经济</p><p>我们不是产品交换</p><p>是商品交换，对吧？</p><p>我们不同的部类</p><p>生产部类之间的交换</p><p>是要通过价值</p><p>由商品价值的交换来实现</p><p>所以价值规律一定起作用</p><p>价值规律一旦起作用</p><p>剩余价值规律也会发挥作用</p><p>于是毛在晚年说过</p><p><strong>“我们今天的社会跟旧社会差不多”</strong></p><p>商品生产、商品交换、八级工资制等等</p><p>资产阶级的法权继续存在</p><p>只有在无产阶专政的条件下加以限制</p><p>所以这就是说我们现在</p><p>只知道今天的中国人多年来</p><p>向西方学习，走了这样条道路</p><h2 id="改革开放起步">改革开放起步</h2><p>我们全面的接受了市场的原则</p><p>从计划经济体制向市场经济体制转变</p><p>引发了整个社会中国社会巨大的转型</p><p>三十多年来我们中国人</p><p>努力的学习资本的逻辑</p><p>我们以为</p><p>通过进一步的让市场经济</p><p>健康正常和完善</p><p>就会带来中国的进步</p><p>那么现在我们遇到了很大的问题</p><p>一个最基本的问题</p><p>有两个基本的问题吧</p><h2 id="第一个基本的问题">第一个基本的问题</h2><p>今日之中国</p><p>社会各个阶层</p><p>无论是在市场经济改革的浪潮中</p><p>取得成功的少数成功者阶层</p><p>还是多数弱势群体</p><p>没有一个社会阶层有生命幸福感</p><p>没有一个阶层找到安身立命的地方</p><p>整个民族没有精神家园</p><p>我们从一个物质上普遍不满足的时代</p><p>进入了一个精神上普遍不安宁的时代</p><p>这是第一个问题基本的问题</p><p>我们的执政党也充分认识到这一点</p><p>所以在胡任Z书记期间</p><p>就提出来建构“社会主义核心价值”</p><p>这样一个目标</p><p>也就是重建我们中国的这个精神家园</p><p>中华民族精神家园和中国未来社会的精神基础</p><p>不能长久地处于价值真空状态</p><p>这是基本问题之一</p><h2 id="基本问题之二">基本问题之二</h2><p>我们今天的中国社会</p><p>并不是由于资本逻辑的演进</p><p>而终于形成了一个理性的社会秩序</p><p>独立的个人彼此之间</p><p>“按照理性做基础的契约的原则打交道”</p><p>这一点<strong>直到今天没做成</strong></p><p>将来会不会成？我看也不会成</p><p>那么今天的不成功</p><p>体现为今天中国社会处于解体的边缘</p><p>这个“解体的边缘”这个判断</p><p>一个最基本的现象</p><p>我们都能看到了、体会到了</p><p>就是<strong>普遍的信任危机</strong></p><p>穷人与富人之间互不信任、</p><p>政府与百姓之间互不信任、</p><p>社会公共机构与社会公共机构之间也互不信任</p><p>甚至家庭内部的成员之间也互不信任</p><p>我们再度的出现了</p><p>如孙中山当年所说的“<strong>一盘散沙的中国人</strong>”</p><p>这样一个局面</p><p>而且这个“沙粒”</p><p>不是以家族为单位的</p><p>以前中国人那句话说</p><p>“各人自扫门前雪休管他人瓦上霜”是吧？</p><p>这也叫“一盘散沙的中国人”</p><p>但是这个门是家门是吧？</p><p>它还是家</p><p>家庭内部有它伦理的法则，有它道德的价值</p><p>今天这个以家庭或者家族为单位的“沙”也已经分解了</p><p><strong>今天的“沙粒”是利己主义的个人</strong></p><p>所以两个基本的问题就放在当下中国人面前</p><p><strong>一个是没有精神家园</strong></p><p><strong>一个是社会处于解体的边缘</strong></p><h3 id="普遍的信任危机">普遍的信任危机</h3><p>各种丑恶的社会现象层出不穷</p><p>有些社会现象的丑恶程度令人发指、不可思议</p><p>是中国几千年历史上未曾有过的</p><p>在中国历史上曾经有过黑暗的时候、战乱的时候</p><p>但是没达到如此的地步</p><p>就是说</p><p>家族内部的分解</p><p>利己主义的个人</p><p>于是今天的状况就是法制不立秩序紊乱各图侥幸群情不安。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
